

RM_INLINE u8 rm_min_u8(const u8 a, const u8 b) {
    return RM_MIN(a, b);
}
RM_INLINE u8 rm_max_u8(const u8 a, const u8 b) {
    return RM_MAX(a, b);
}
RM_INLINE u8 rm_clamp_u8(const u8 val, const u8 min, const u8 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE u8 rm_mod_u8(const u8 a, const u8 b) {
    return a % b;
}
RM_INLINE u16 rm_min_u16(const u16 a, const u16 b) {
    return RM_MIN(a, b);
}
RM_INLINE u16 rm_max_u16(const u16 a, const u16 b) {
    return RM_MAX(a, b);
}
RM_INLINE u16 rm_clamp_u16(const u16 val, const u16 min, const u16 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE u16 rm_mod_u16(const u16 a, const u16 b) {
    return a % b;
}
RM_INLINE u32 rm_min_u32(const u32 a, const u32 b) {
    return RM_MIN(a, b);
}
RM_INLINE u32 rm_max_u32(const u32 a, const u32 b) {
    return RM_MAX(a, b);
}
RM_INLINE u32 rm_clamp_u32(const u32 val, const u32 min, const u32 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE u32 rm_mod_u32(const u32 a, const u32 b) {
    return a % b;
}
RM_INLINE u64 rm_min_u64(const u64 a, const u64 b) {
    return RM_MIN(a, b);
}
RM_INLINE u64 rm_max_u64(const u64 a, const u64 b) {
    return RM_MAX(a, b);
}
RM_INLINE u64 rm_clamp_u64(const u64 val, const u64 min, const u64 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE u64 rm_mod_u64(const u64 a, const u64 b) {
    return a % b;
}
RM_INLINE i8 rm_abs_i8(const i8 x) {
    return RM_ABS(x);
}
RM_INLINE i8 rm_min_i8(const i8 a, const i8 b) {
    return RM_MIN(a, b);
}
RM_INLINE i8 rm_max_i8(const i8 a, const i8 b) {
    return RM_MAX(a, b);
}
RM_INLINE i8 rm_clamp_i8(const i8 val, const i8 min, const i8 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE i8 rm_mod_i8(const i8 a, const i8 b) {
    return a % b;
}
RM_INLINE i8 rm_sign_i8(const i8 x) {
    return (x > 0) - (x < 0);
}
RM_INLINE i8 rm_copysign_i8(const i8 x, const i8 s) {
    return rm_abs_i8(x) * rm_sign_i8(s);
}
RM_INLINE i16 rm_abs_i16(const i16 x) {
    return RM_ABS(x);
}
RM_INLINE i16 rm_min_i16(const i16 a, const i16 b) {
    return RM_MIN(a, b);
}
RM_INLINE i16 rm_max_i16(const i16 a, const i16 b) {
    return RM_MAX(a, b);
}
RM_INLINE i16 rm_clamp_i16(const i16 val, const i16 min, const i16 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE i16 rm_mod_i16(const i16 a, const i16 b) {
    return a % b;
}
RM_INLINE i16 rm_sign_i16(const i16 x) {
    return (x > 0) - (x < 0);
}
RM_INLINE i16 rm_copysign_i16(const i16 x, const i16 s) {
    return rm_abs_i16(x) * rm_sign_i16(s);
}
RM_INLINE i32 rm_abs_i32(const i32 x) {
    return RM_ABS(x);
}
RM_INLINE i32 rm_min_i32(const i32 a, const i32 b) {
    return RM_MIN(a, b);
}
RM_INLINE i32 rm_max_i32(const i32 a, const i32 b) {
    return RM_MAX(a, b);
}
RM_INLINE i32 rm_clamp_i32(const i32 val, const i32 min, const i32 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE i32 rm_mod_i32(const i32 a, const i32 b) {
    return a % b;
}
RM_INLINE i32 rm_sign_i32(const i32 x) {
    return (x > 0) - (x < 0);
}
RM_INLINE i32 rm_copysign_i32(const i32 x, const i32 s) {
    return rm_abs_i32(x) * rm_sign_i32(s);
}
RM_INLINE i64 rm_abs_i64(const i64 x) {
    return RM_ABS(x);
}
RM_INLINE i64 rm_min_i64(const i64 a, const i64 b) {
    return RM_MIN(a, b);
}
RM_INLINE i64 rm_max_i64(const i64 a, const i64 b) {
    return RM_MAX(a, b);
}
RM_INLINE i64 rm_clamp_i64(const i64 val, const i64 min, const i64 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE i64 rm_mod_i64(const i64 a, const i64 b) {
    return a % b;
}
RM_INLINE i64 rm_sign_i64(const i64 x) {
    return (x > 0) - (x < 0);
}
RM_INLINE i64 rm_copysign_i64(const i64 x, const i64 s) {
    return rm_abs_i64(x) * rm_sign_i64(s);
}
RM_INLINE f32 rm_abs_f32(const f32 x) {
    return RM_ABS(x);
}
RM_INLINE f32 rm_min_f32(const f32 a, const f32 b) {
    return RM_MIN(a, b);
}
RM_INLINE f32 rm_max_f32(const f32 a, const f32 b) {
    return RM_MAX(a, b);
}
RM_INLINE f32 rm_clamp_f32(const f32 val, const f32 min, const f32 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE f32 rm_trunc_f32(const f32 x) {
    return (i32)x;
}
RM_INLINE f32 rm_mod_f32(const f32 a, const f32 b) {
    return a - (rm_trunc_f32(a / b) * b);
}
RM_INLINE f32 rm_sign_f32(const f32 x) {
    return (x > 0) - (x < 0);
}
RM_INLINE f32 rm_copysign_f32(const f32 x, const f32 s) {
    return rm_abs_f32(x) * rm_sign_f32(s);
}
RM_INLINE f64 rm_abs_f64(const f64 x) {
    return RM_ABS(x);
}
RM_INLINE f64 rm_min_f64(const f64 a, const f64 b) {
    return RM_MIN(a, b);
}
RM_INLINE f64 rm_max_f64(const f64 a, const f64 b) {
    return RM_MAX(a, b);
}
RM_INLINE f64 rm_clamp_f64(const f64 val, const f64 min, const f64 max) {
    return RM_CLAMP(val, min, max);
}
RM_INLINE f64 rm_trunc_f64(const f64 x) {
    return (i64)x;
}
RM_INLINE f64 rm_mod_f64(const f64 a, const f64 b) {
    return a - (rm_trunc_f64(a / b) * b);
}
RM_INLINE f64 rm_sign_f64(const f64 x) {
    return (x > 0) - (x < 0);
}
RM_INLINE f64 rm_copysign_f64(const f64 x, const f64 s) {
    return rm_abs_f64(x) * rm_sign_f64(s);
}
RM_INLINE f32 rm_floor_f32(const f32 x) {
    return (x < 0) ? rm_trunc_f32(x - 1) : rm_trunc_f32(x);
}
RM_INLINE f64 rm_floor_f64(const f64 x) {
    return (x < 0) ? rm_trunc_f64(x - 1) : rm_trunc_f64(x);
}
RM_INLINE f32 rm_ceil_f32(const f32 x) {
    return (x < 0) ? rm_trunc_f32(x) : rm_trunc_f32(x + 1);
}
RM_INLINE f64 rm_ceil_f64(const f64 x) {
    return (x < 0) ? rm_trunc_f64(x) : rm_trunc_f64(x + 1);
}
RM_INLINE f32 rm_round_f32(const f32 x) {
    f32 t;

    if (x < 0) {
        t = rm_floor_f32(-x);
        return ((t + x) <= -0.5F) ? -(t + 1) : -t;
    }

    t = rm_floor_f32(x);
    return ((t - x) <= -0.5F) ? (t + 1) : t;
}
RM_INLINE f64 rm_round_f64(const f64 x) {
    f64 t;

    if (x < 0) {
        t = rm_floor_f64(-x);
        return ((t + x) <= -0.5) ? -(t + 1) : -t;
    }

    t = rm_floor_f64(x);
    return ((t - x) <= -0.5) ? (t + 1) : t;
}
RM_INLINE f32 rm_fract_f32(const f32 x) {
    return x - rm_floor_f32(x);
}
RM_INLINE f64 rm_fract_f64(const f64 x) {
    return x - rm_floor_f64(x);
}
RM_INLINE f32 rm_deg2rad_f32(const f32 x) {
    return x * RM_DEG2RAD_F32;
}
RM_INLINE f64 rm_deg2rad_f64(const f64 x) {
    return x * RM_DEG2RAD_F64;
}
RM_INLINE f32 rm_rad2deg_f32(const f32 x) {
    return x * RM_RAD2DEG_F32;
}
RM_INLINE f64 rm_rad2deg_f64(const f64 x) {
    return x * RM_RAD2DEG_F64;
}
RM_INLINE bool rm_any_u8x2(const u8x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_u8x3(const u8x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_u8x4(const u8x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_u8x2(const u8x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_u8x3(const u8x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_u8x4(const u8x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_u8x2(const u8x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_u8x3(const u8x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_u8x4(const u8x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_u8x2(const u8x2 a, const u8x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_u8x3(const u8x3 a, const u8x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_u8x4(const u8x4 a, const u8x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_u8x2(const u8x2 a, const u8x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_u8x3(const u8x3 a, const u8x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_u8x4(const u8x4 a, const u8x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_u8x2(const u8x2 a, const u8x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_u8x3(const u8x3 a, const u8x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_u8x4(const u8x4 a, const u8x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_u8x2(const u8x2 a, const u8x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_u8x3(const u8x3 a, const u8x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_u8x4(const u8x4 a, const u8x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_u8x2(const u8x2 a, const u8x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_u8x3(const u8x3 a, const u8x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_u8x4(const u8x4 a, const u8x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_u8x2(const u8x2 a, const u8x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_u8x3(const u8x3 a, const u8x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_u8x4(const u8x4 a, const u8x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_u8x2(const u8x2 v, const u8 s) {
    return rm_eq_u8x2(v, rm_u8x2s(s));
}
RM_INLINE boolx3 rm_eqs_u8x3(const u8x3 v, const u8 s) {
    return rm_eq_u8x3(v, rm_u8x3s(s));
}
RM_INLINE boolx4 rm_eqs_u8x4(const u8x4 v, const u8 s) {
    return rm_eq_u8x4(v, rm_u8x4s(s));
}
RM_INLINE boolx2 rm_neqs_u8x2(const u8x2 v, const u8 s) {
    return rm_neq_u8x2(v, rm_u8x2s(s));
}
RM_INLINE boolx3 rm_neqs_u8x3(const u8x3 v, const u8 s) {
    return rm_neq_u8x3(v, rm_u8x3s(s));
}
RM_INLINE boolx4 rm_neqs_u8x4(const u8x4 v, const u8 s) {
    return rm_neq_u8x4(v, rm_u8x4s(s));
}
RM_INLINE boolx2 rm_lts_u8x2(const u8x2 v, const u8 s) {
    return rm_lt_u8x2(v, rm_u8x2s(s));
}
RM_INLINE boolx3 rm_lts_u8x3(const u8x3 v, const u8 s) {
    return rm_lt_u8x3(v, rm_u8x3s(s));
}
RM_INLINE boolx4 rm_lts_u8x4(const u8x4 v, const u8 s) {
    return rm_lt_u8x4(v, rm_u8x4s(s));
}
RM_INLINE boolx2 rm_lteqs_u8x2(const u8x2 v, const u8 s) {
    return rm_lteq_u8x2(v, rm_u8x2s(s));
}
RM_INLINE boolx3 rm_lteqs_u8x3(const u8x3 v, const u8 s) {
    return rm_lteq_u8x3(v, rm_u8x3s(s));
}
RM_INLINE boolx4 rm_lteqs_u8x4(const u8x4 v, const u8 s) {
    return rm_lteq_u8x4(v, rm_u8x4s(s));
}
RM_INLINE boolx2 rm_gts_u8x2(const u8x2 v, const u8 s) {
    return rm_gt_u8x2(v, rm_u8x2s(s));
}
RM_INLINE boolx3 rm_gts_u8x3(const u8x3 v, const u8 s) {
    return rm_gt_u8x3(v, rm_u8x3s(s));
}
RM_INLINE boolx4 rm_gts_u8x4(const u8x4 v, const u8 s) {
    return rm_gt_u8x4(v, rm_u8x4s(s));
}
RM_INLINE boolx2 rm_gteqs_u8x2(const u8x2 v, const u8 s) {
    return rm_gteq_u8x2(v, rm_u8x2s(s));
}
RM_INLINE boolx3 rm_gteqs_u8x3(const u8x3 v, const u8 s) {
    return rm_gteq_u8x3(v, rm_u8x3s(s));
}
RM_INLINE boolx4 rm_gteqs_u8x4(const u8x4 v, const u8 s) {
    return rm_gteq_u8x4(v, rm_u8x4s(s));
}
RM_INLINE bool rm_any_u16x2(const u16x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_u16x3(const u16x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_u16x4(const u16x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_u16x2(const u16x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_u16x3(const u16x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_u16x4(const u16x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_u16x2(const u16x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_u16x3(const u16x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_u16x4(const u16x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_u16x2(const u16x2 a, const u16x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_u16x3(const u16x3 a, const u16x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_u16x4(const u16x4 a, const u16x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_u16x2(const u16x2 a, const u16x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_u16x3(const u16x3 a, const u16x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_u16x4(const u16x4 a, const u16x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_u16x2(const u16x2 a, const u16x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_u16x3(const u16x3 a, const u16x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_u16x4(const u16x4 a, const u16x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_u16x2(const u16x2 a, const u16x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_u16x3(const u16x3 a, const u16x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_u16x4(const u16x4 a, const u16x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_u16x2(const u16x2 a, const u16x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_u16x3(const u16x3 a, const u16x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_u16x4(const u16x4 a, const u16x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_u16x2(const u16x2 a, const u16x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_u16x3(const u16x3 a, const u16x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_u16x4(const u16x4 a, const u16x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_u16x2(const u16x2 v, const u16 s) {
    return rm_eq_u16x2(v, rm_u16x2s(s));
}
RM_INLINE boolx3 rm_eqs_u16x3(const u16x3 v, const u16 s) {
    return rm_eq_u16x3(v, rm_u16x3s(s));
}
RM_INLINE boolx4 rm_eqs_u16x4(const u16x4 v, const u16 s) {
    return rm_eq_u16x4(v, rm_u16x4s(s));
}
RM_INLINE boolx2 rm_neqs_u16x2(const u16x2 v, const u16 s) {
    return rm_neq_u16x2(v, rm_u16x2s(s));
}
RM_INLINE boolx3 rm_neqs_u16x3(const u16x3 v, const u16 s) {
    return rm_neq_u16x3(v, rm_u16x3s(s));
}
RM_INLINE boolx4 rm_neqs_u16x4(const u16x4 v, const u16 s) {
    return rm_neq_u16x4(v, rm_u16x4s(s));
}
RM_INLINE boolx2 rm_lts_u16x2(const u16x2 v, const u16 s) {
    return rm_lt_u16x2(v, rm_u16x2s(s));
}
RM_INLINE boolx3 rm_lts_u16x3(const u16x3 v, const u16 s) {
    return rm_lt_u16x3(v, rm_u16x3s(s));
}
RM_INLINE boolx4 rm_lts_u16x4(const u16x4 v, const u16 s) {
    return rm_lt_u16x4(v, rm_u16x4s(s));
}
RM_INLINE boolx2 rm_lteqs_u16x2(const u16x2 v, const u16 s) {
    return rm_lteq_u16x2(v, rm_u16x2s(s));
}
RM_INLINE boolx3 rm_lteqs_u16x3(const u16x3 v, const u16 s) {
    return rm_lteq_u16x3(v, rm_u16x3s(s));
}
RM_INLINE boolx4 rm_lteqs_u16x4(const u16x4 v, const u16 s) {
    return rm_lteq_u16x4(v, rm_u16x4s(s));
}
RM_INLINE boolx2 rm_gts_u16x2(const u16x2 v, const u16 s) {
    return rm_gt_u16x2(v, rm_u16x2s(s));
}
RM_INLINE boolx3 rm_gts_u16x3(const u16x3 v, const u16 s) {
    return rm_gt_u16x3(v, rm_u16x3s(s));
}
RM_INLINE boolx4 rm_gts_u16x4(const u16x4 v, const u16 s) {
    return rm_gt_u16x4(v, rm_u16x4s(s));
}
RM_INLINE boolx2 rm_gteqs_u16x2(const u16x2 v, const u16 s) {
    return rm_gteq_u16x2(v, rm_u16x2s(s));
}
RM_INLINE boolx3 rm_gteqs_u16x3(const u16x3 v, const u16 s) {
    return rm_gteq_u16x3(v, rm_u16x3s(s));
}
RM_INLINE boolx4 rm_gteqs_u16x4(const u16x4 v, const u16 s) {
    return rm_gteq_u16x4(v, rm_u16x4s(s));
}
RM_INLINE bool rm_any_u32x2(const u32x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_u32x3(const u32x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_u32x4(const u32x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_u32x2(const u32x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_u32x3(const u32x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_u32x4(const u32x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_u32x2(const u32x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_u32x3(const u32x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_u32x4(const u32x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_u32x2(const u32x2 a, const u32x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_u32x3(const u32x3 a, const u32x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_u32x4(const u32x4 a, const u32x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_u32x2(const u32x2 a, const u32x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_u32x3(const u32x3 a, const u32x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_u32x4(const u32x4 a, const u32x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_u32x2(const u32x2 a, const u32x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_u32x3(const u32x3 a, const u32x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_u32x4(const u32x4 a, const u32x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_u32x2(const u32x2 a, const u32x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_u32x3(const u32x3 a, const u32x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_u32x4(const u32x4 a, const u32x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_u32x2(const u32x2 a, const u32x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_u32x3(const u32x3 a, const u32x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_u32x4(const u32x4 a, const u32x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_u32x2(const u32x2 a, const u32x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_u32x3(const u32x3 a, const u32x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_u32x4(const u32x4 a, const u32x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_u32x2(const u32x2 v, const u32 s) {
    return rm_eq_u32x2(v, rm_u32x2s(s));
}
RM_INLINE boolx3 rm_eqs_u32x3(const u32x3 v, const u32 s) {
    return rm_eq_u32x3(v, rm_u32x3s(s));
}
RM_INLINE boolx4 rm_eqs_u32x4(const u32x4 v, const u32 s) {
    return rm_eq_u32x4(v, rm_u32x4s(s));
}
RM_INLINE boolx2 rm_neqs_u32x2(const u32x2 v, const u32 s) {
    return rm_neq_u32x2(v, rm_u32x2s(s));
}
RM_INLINE boolx3 rm_neqs_u32x3(const u32x3 v, const u32 s) {
    return rm_neq_u32x3(v, rm_u32x3s(s));
}
RM_INLINE boolx4 rm_neqs_u32x4(const u32x4 v, const u32 s) {
    return rm_neq_u32x4(v, rm_u32x4s(s));
}
RM_INLINE boolx2 rm_lts_u32x2(const u32x2 v, const u32 s) {
    return rm_lt_u32x2(v, rm_u32x2s(s));
}
RM_INLINE boolx3 rm_lts_u32x3(const u32x3 v, const u32 s) {
    return rm_lt_u32x3(v, rm_u32x3s(s));
}
RM_INLINE boolx4 rm_lts_u32x4(const u32x4 v, const u32 s) {
    return rm_lt_u32x4(v, rm_u32x4s(s));
}
RM_INLINE boolx2 rm_lteqs_u32x2(const u32x2 v, const u32 s) {
    return rm_lteq_u32x2(v, rm_u32x2s(s));
}
RM_INLINE boolx3 rm_lteqs_u32x3(const u32x3 v, const u32 s) {
    return rm_lteq_u32x3(v, rm_u32x3s(s));
}
RM_INLINE boolx4 rm_lteqs_u32x4(const u32x4 v, const u32 s) {
    return rm_lteq_u32x4(v, rm_u32x4s(s));
}
RM_INLINE boolx2 rm_gts_u32x2(const u32x2 v, const u32 s) {
    return rm_gt_u32x2(v, rm_u32x2s(s));
}
RM_INLINE boolx3 rm_gts_u32x3(const u32x3 v, const u32 s) {
    return rm_gt_u32x3(v, rm_u32x3s(s));
}
RM_INLINE boolx4 rm_gts_u32x4(const u32x4 v, const u32 s) {
    return rm_gt_u32x4(v, rm_u32x4s(s));
}
RM_INLINE boolx2 rm_gteqs_u32x2(const u32x2 v, const u32 s) {
    return rm_gteq_u32x2(v, rm_u32x2s(s));
}
RM_INLINE boolx3 rm_gteqs_u32x3(const u32x3 v, const u32 s) {
    return rm_gteq_u32x3(v, rm_u32x3s(s));
}
RM_INLINE boolx4 rm_gteqs_u32x4(const u32x4 v, const u32 s) {
    return rm_gteq_u32x4(v, rm_u32x4s(s));
}
RM_INLINE bool rm_any_u64x2(const u64x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_u64x3(const u64x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_u64x4(const u64x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_u64x2(const u64x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_u64x3(const u64x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_u64x4(const u64x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_u64x2(const u64x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_u64x3(const u64x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_u64x4(const u64x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_u64x2(const u64x2 a, const u64x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_u64x3(const u64x3 a, const u64x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_u64x4(const u64x4 a, const u64x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_u64x2(const u64x2 a, const u64x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_u64x3(const u64x3 a, const u64x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_u64x4(const u64x4 a, const u64x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_u64x2(const u64x2 a, const u64x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_u64x3(const u64x3 a, const u64x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_u64x4(const u64x4 a, const u64x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_u64x2(const u64x2 a, const u64x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_u64x3(const u64x3 a, const u64x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_u64x4(const u64x4 a, const u64x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_u64x2(const u64x2 a, const u64x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_u64x3(const u64x3 a, const u64x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_u64x4(const u64x4 a, const u64x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_u64x2(const u64x2 a, const u64x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_u64x3(const u64x3 a, const u64x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_u64x4(const u64x4 a, const u64x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_u64x2(const u64x2 v, const u64 s) {
    return rm_eq_u64x2(v, rm_u64x2s(s));
}
RM_INLINE boolx3 rm_eqs_u64x3(const u64x3 v, const u64 s) {
    return rm_eq_u64x3(v, rm_u64x3s(s));
}
RM_INLINE boolx4 rm_eqs_u64x4(const u64x4 v, const u64 s) {
    return rm_eq_u64x4(v, rm_u64x4s(s));
}
RM_INLINE boolx2 rm_neqs_u64x2(const u64x2 v, const u64 s) {
    return rm_neq_u64x2(v, rm_u64x2s(s));
}
RM_INLINE boolx3 rm_neqs_u64x3(const u64x3 v, const u64 s) {
    return rm_neq_u64x3(v, rm_u64x3s(s));
}
RM_INLINE boolx4 rm_neqs_u64x4(const u64x4 v, const u64 s) {
    return rm_neq_u64x4(v, rm_u64x4s(s));
}
RM_INLINE boolx2 rm_lts_u64x2(const u64x2 v, const u64 s) {
    return rm_lt_u64x2(v, rm_u64x2s(s));
}
RM_INLINE boolx3 rm_lts_u64x3(const u64x3 v, const u64 s) {
    return rm_lt_u64x3(v, rm_u64x3s(s));
}
RM_INLINE boolx4 rm_lts_u64x4(const u64x4 v, const u64 s) {
    return rm_lt_u64x4(v, rm_u64x4s(s));
}
RM_INLINE boolx2 rm_lteqs_u64x2(const u64x2 v, const u64 s) {
    return rm_lteq_u64x2(v, rm_u64x2s(s));
}
RM_INLINE boolx3 rm_lteqs_u64x3(const u64x3 v, const u64 s) {
    return rm_lteq_u64x3(v, rm_u64x3s(s));
}
RM_INLINE boolx4 rm_lteqs_u64x4(const u64x4 v, const u64 s) {
    return rm_lteq_u64x4(v, rm_u64x4s(s));
}
RM_INLINE boolx2 rm_gts_u64x2(const u64x2 v, const u64 s) {
    return rm_gt_u64x2(v, rm_u64x2s(s));
}
RM_INLINE boolx3 rm_gts_u64x3(const u64x3 v, const u64 s) {
    return rm_gt_u64x3(v, rm_u64x3s(s));
}
RM_INLINE boolx4 rm_gts_u64x4(const u64x4 v, const u64 s) {
    return rm_gt_u64x4(v, rm_u64x4s(s));
}
RM_INLINE boolx2 rm_gteqs_u64x2(const u64x2 v, const u64 s) {
    return rm_gteq_u64x2(v, rm_u64x2s(s));
}
RM_INLINE boolx3 rm_gteqs_u64x3(const u64x3 v, const u64 s) {
    return rm_gteq_u64x3(v, rm_u64x3s(s));
}
RM_INLINE boolx4 rm_gteqs_u64x4(const u64x4 v, const u64 s) {
    return rm_gteq_u64x4(v, rm_u64x4s(s));
}
RM_INLINE bool rm_any_i8x2(const i8x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_i8x3(const i8x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_i8x4(const i8x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_i8x2(const i8x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_i8x3(const i8x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_i8x4(const i8x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_i8x2(const i8x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_i8x3(const i8x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_i8x4(const i8x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_i8x2(const i8x2 a, const i8x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_i8x3(const i8x3 a, const i8x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_i8x4(const i8x4 a, const i8x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_i8x2(const i8x2 a, const i8x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_i8x3(const i8x3 a, const i8x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_i8x4(const i8x4 a, const i8x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_i8x2(const i8x2 a, const i8x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_i8x3(const i8x3 a, const i8x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_i8x4(const i8x4 a, const i8x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_i8x2(const i8x2 a, const i8x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_i8x3(const i8x3 a, const i8x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_i8x4(const i8x4 a, const i8x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_i8x2(const i8x2 a, const i8x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_i8x3(const i8x3 a, const i8x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_i8x4(const i8x4 a, const i8x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_i8x2(const i8x2 a, const i8x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_i8x3(const i8x3 a, const i8x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_i8x4(const i8x4 a, const i8x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_i8x2(const i8x2 v, const i8 s) {
    return rm_eq_i8x2(v, rm_i8x2s(s));
}
RM_INLINE boolx3 rm_eqs_i8x3(const i8x3 v, const i8 s) {
    return rm_eq_i8x3(v, rm_i8x3s(s));
}
RM_INLINE boolx4 rm_eqs_i8x4(const i8x4 v, const i8 s) {
    return rm_eq_i8x4(v, rm_i8x4s(s));
}
RM_INLINE boolx2 rm_neqs_i8x2(const i8x2 v, const i8 s) {
    return rm_neq_i8x2(v, rm_i8x2s(s));
}
RM_INLINE boolx3 rm_neqs_i8x3(const i8x3 v, const i8 s) {
    return rm_neq_i8x3(v, rm_i8x3s(s));
}
RM_INLINE boolx4 rm_neqs_i8x4(const i8x4 v, const i8 s) {
    return rm_neq_i8x4(v, rm_i8x4s(s));
}
RM_INLINE boolx2 rm_lts_i8x2(const i8x2 v, const i8 s) {
    return rm_lt_i8x2(v, rm_i8x2s(s));
}
RM_INLINE boolx3 rm_lts_i8x3(const i8x3 v, const i8 s) {
    return rm_lt_i8x3(v, rm_i8x3s(s));
}
RM_INLINE boolx4 rm_lts_i8x4(const i8x4 v, const i8 s) {
    return rm_lt_i8x4(v, rm_i8x4s(s));
}
RM_INLINE boolx2 rm_lteqs_i8x2(const i8x2 v, const i8 s) {
    return rm_lteq_i8x2(v, rm_i8x2s(s));
}
RM_INLINE boolx3 rm_lteqs_i8x3(const i8x3 v, const i8 s) {
    return rm_lteq_i8x3(v, rm_i8x3s(s));
}
RM_INLINE boolx4 rm_lteqs_i8x4(const i8x4 v, const i8 s) {
    return rm_lteq_i8x4(v, rm_i8x4s(s));
}
RM_INLINE boolx2 rm_gts_i8x2(const i8x2 v, const i8 s) {
    return rm_gt_i8x2(v, rm_i8x2s(s));
}
RM_INLINE boolx3 rm_gts_i8x3(const i8x3 v, const i8 s) {
    return rm_gt_i8x3(v, rm_i8x3s(s));
}
RM_INLINE boolx4 rm_gts_i8x4(const i8x4 v, const i8 s) {
    return rm_gt_i8x4(v, rm_i8x4s(s));
}
RM_INLINE boolx2 rm_gteqs_i8x2(const i8x2 v, const i8 s) {
    return rm_gteq_i8x2(v, rm_i8x2s(s));
}
RM_INLINE boolx3 rm_gteqs_i8x3(const i8x3 v, const i8 s) {
    return rm_gteq_i8x3(v, rm_i8x3s(s));
}
RM_INLINE boolx4 rm_gteqs_i8x4(const i8x4 v, const i8 s) {
    return rm_gteq_i8x4(v, rm_i8x4s(s));
}
RM_INLINE bool rm_any_i16x2(const i16x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_i16x3(const i16x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_i16x4(const i16x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_i16x2(const i16x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_i16x3(const i16x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_i16x4(const i16x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_i16x2(const i16x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_i16x3(const i16x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_i16x4(const i16x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_i16x2(const i16x2 a, const i16x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_i16x3(const i16x3 a, const i16x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_i16x4(const i16x4 a, const i16x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_i16x2(const i16x2 a, const i16x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_i16x3(const i16x3 a, const i16x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_i16x4(const i16x4 a, const i16x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_i16x2(const i16x2 a, const i16x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_i16x3(const i16x3 a, const i16x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_i16x4(const i16x4 a, const i16x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_i16x2(const i16x2 a, const i16x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_i16x3(const i16x3 a, const i16x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_i16x4(const i16x4 a, const i16x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_i16x2(const i16x2 a, const i16x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_i16x3(const i16x3 a, const i16x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_i16x4(const i16x4 a, const i16x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_i16x2(const i16x2 a, const i16x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_i16x3(const i16x3 a, const i16x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_i16x4(const i16x4 a, const i16x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_i16x2(const i16x2 v, const i16 s) {
    return rm_eq_i16x2(v, rm_i16x2s(s));
}
RM_INLINE boolx3 rm_eqs_i16x3(const i16x3 v, const i16 s) {
    return rm_eq_i16x3(v, rm_i16x3s(s));
}
RM_INLINE boolx4 rm_eqs_i16x4(const i16x4 v, const i16 s) {
    return rm_eq_i16x4(v, rm_i16x4s(s));
}
RM_INLINE boolx2 rm_neqs_i16x2(const i16x2 v, const i16 s) {
    return rm_neq_i16x2(v, rm_i16x2s(s));
}
RM_INLINE boolx3 rm_neqs_i16x3(const i16x3 v, const i16 s) {
    return rm_neq_i16x3(v, rm_i16x3s(s));
}
RM_INLINE boolx4 rm_neqs_i16x4(const i16x4 v, const i16 s) {
    return rm_neq_i16x4(v, rm_i16x4s(s));
}
RM_INLINE boolx2 rm_lts_i16x2(const i16x2 v, const i16 s) {
    return rm_lt_i16x2(v, rm_i16x2s(s));
}
RM_INLINE boolx3 rm_lts_i16x3(const i16x3 v, const i16 s) {
    return rm_lt_i16x3(v, rm_i16x3s(s));
}
RM_INLINE boolx4 rm_lts_i16x4(const i16x4 v, const i16 s) {
    return rm_lt_i16x4(v, rm_i16x4s(s));
}
RM_INLINE boolx2 rm_lteqs_i16x2(const i16x2 v, const i16 s) {
    return rm_lteq_i16x2(v, rm_i16x2s(s));
}
RM_INLINE boolx3 rm_lteqs_i16x3(const i16x3 v, const i16 s) {
    return rm_lteq_i16x3(v, rm_i16x3s(s));
}
RM_INLINE boolx4 rm_lteqs_i16x4(const i16x4 v, const i16 s) {
    return rm_lteq_i16x4(v, rm_i16x4s(s));
}
RM_INLINE boolx2 rm_gts_i16x2(const i16x2 v, const i16 s) {
    return rm_gt_i16x2(v, rm_i16x2s(s));
}
RM_INLINE boolx3 rm_gts_i16x3(const i16x3 v, const i16 s) {
    return rm_gt_i16x3(v, rm_i16x3s(s));
}
RM_INLINE boolx4 rm_gts_i16x4(const i16x4 v, const i16 s) {
    return rm_gt_i16x4(v, rm_i16x4s(s));
}
RM_INLINE boolx2 rm_gteqs_i16x2(const i16x2 v, const i16 s) {
    return rm_gteq_i16x2(v, rm_i16x2s(s));
}
RM_INLINE boolx3 rm_gteqs_i16x3(const i16x3 v, const i16 s) {
    return rm_gteq_i16x3(v, rm_i16x3s(s));
}
RM_INLINE boolx4 rm_gteqs_i16x4(const i16x4 v, const i16 s) {
    return rm_gteq_i16x4(v, rm_i16x4s(s));
}
RM_INLINE bool rm_any_i32x2(const i32x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_i32x3(const i32x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_i32x4(const i32x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_i32x2(const i32x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_i32x3(const i32x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_i32x4(const i32x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_i32x2(const i32x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_i32x3(const i32x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_i32x4(const i32x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_i32x2(const i32x2 a, const i32x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_i32x3(const i32x3 a, const i32x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_i32x4(const i32x4 a, const i32x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_i32x2(const i32x2 a, const i32x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_i32x3(const i32x3 a, const i32x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_i32x4(const i32x4 a, const i32x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_i32x2(const i32x2 a, const i32x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_i32x3(const i32x3 a, const i32x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_i32x4(const i32x4 a, const i32x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_i32x2(const i32x2 a, const i32x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_i32x3(const i32x3 a, const i32x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_i32x4(const i32x4 a, const i32x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_i32x2(const i32x2 a, const i32x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_i32x3(const i32x3 a, const i32x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_i32x4(const i32x4 a, const i32x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_i32x2(const i32x2 a, const i32x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_i32x3(const i32x3 a, const i32x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_i32x4(const i32x4 a, const i32x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_i32x2(const i32x2 v, const i32 s) {
    return rm_eq_i32x2(v, rm_i32x2s(s));
}
RM_INLINE boolx3 rm_eqs_i32x3(const i32x3 v, const i32 s) {
    return rm_eq_i32x3(v, rm_i32x3s(s));
}
RM_INLINE boolx4 rm_eqs_i32x4(const i32x4 v, const i32 s) {
    return rm_eq_i32x4(v, rm_i32x4s(s));
}
RM_INLINE boolx2 rm_neqs_i32x2(const i32x2 v, const i32 s) {
    return rm_neq_i32x2(v, rm_i32x2s(s));
}
RM_INLINE boolx3 rm_neqs_i32x3(const i32x3 v, const i32 s) {
    return rm_neq_i32x3(v, rm_i32x3s(s));
}
RM_INLINE boolx4 rm_neqs_i32x4(const i32x4 v, const i32 s) {
    return rm_neq_i32x4(v, rm_i32x4s(s));
}
RM_INLINE boolx2 rm_lts_i32x2(const i32x2 v, const i32 s) {
    return rm_lt_i32x2(v, rm_i32x2s(s));
}
RM_INLINE boolx3 rm_lts_i32x3(const i32x3 v, const i32 s) {
    return rm_lt_i32x3(v, rm_i32x3s(s));
}
RM_INLINE boolx4 rm_lts_i32x4(const i32x4 v, const i32 s) {
    return rm_lt_i32x4(v, rm_i32x4s(s));
}
RM_INLINE boolx2 rm_lteqs_i32x2(const i32x2 v, const i32 s) {
    return rm_lteq_i32x2(v, rm_i32x2s(s));
}
RM_INLINE boolx3 rm_lteqs_i32x3(const i32x3 v, const i32 s) {
    return rm_lteq_i32x3(v, rm_i32x3s(s));
}
RM_INLINE boolx4 rm_lteqs_i32x4(const i32x4 v, const i32 s) {
    return rm_lteq_i32x4(v, rm_i32x4s(s));
}
RM_INLINE boolx2 rm_gts_i32x2(const i32x2 v, const i32 s) {
    return rm_gt_i32x2(v, rm_i32x2s(s));
}
RM_INLINE boolx3 rm_gts_i32x3(const i32x3 v, const i32 s) {
    return rm_gt_i32x3(v, rm_i32x3s(s));
}
RM_INLINE boolx4 rm_gts_i32x4(const i32x4 v, const i32 s) {
    return rm_gt_i32x4(v, rm_i32x4s(s));
}
RM_INLINE boolx2 rm_gteqs_i32x2(const i32x2 v, const i32 s) {
    return rm_gteq_i32x2(v, rm_i32x2s(s));
}
RM_INLINE boolx3 rm_gteqs_i32x3(const i32x3 v, const i32 s) {
    return rm_gteq_i32x3(v, rm_i32x3s(s));
}
RM_INLINE boolx4 rm_gteqs_i32x4(const i32x4 v, const i32 s) {
    return rm_gteq_i32x4(v, rm_i32x4s(s));
}
RM_INLINE bool rm_any_i64x2(const i64x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_i64x3(const i64x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_i64x4(const i64x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_i64x2(const i64x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_i64x3(const i64x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_i64x4(const i64x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_i64x2(const i64x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_i64x3(const i64x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_i64x4(const i64x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_i64x2(const i64x2 a, const i64x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_i64x3(const i64x3 a, const i64x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_i64x4(const i64x4 a, const i64x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_i64x2(const i64x2 a, const i64x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_i64x3(const i64x3 a, const i64x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_i64x4(const i64x4 a, const i64x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_i64x2(const i64x2 a, const i64x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_i64x3(const i64x3 a, const i64x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_i64x4(const i64x4 a, const i64x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_i64x2(const i64x2 a, const i64x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_i64x3(const i64x3 a, const i64x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_i64x4(const i64x4 a, const i64x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_i64x2(const i64x2 a, const i64x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_i64x3(const i64x3 a, const i64x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_i64x4(const i64x4 a, const i64x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_i64x2(const i64x2 a, const i64x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_i64x3(const i64x3 a, const i64x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_i64x4(const i64x4 a, const i64x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_i64x2(const i64x2 v, const i64 s) {
    return rm_eq_i64x2(v, rm_i64x2s(s));
}
RM_INLINE boolx3 rm_eqs_i64x3(const i64x3 v, const i64 s) {
    return rm_eq_i64x3(v, rm_i64x3s(s));
}
RM_INLINE boolx4 rm_eqs_i64x4(const i64x4 v, const i64 s) {
    return rm_eq_i64x4(v, rm_i64x4s(s));
}
RM_INLINE boolx2 rm_neqs_i64x2(const i64x2 v, const i64 s) {
    return rm_neq_i64x2(v, rm_i64x2s(s));
}
RM_INLINE boolx3 rm_neqs_i64x3(const i64x3 v, const i64 s) {
    return rm_neq_i64x3(v, rm_i64x3s(s));
}
RM_INLINE boolx4 rm_neqs_i64x4(const i64x4 v, const i64 s) {
    return rm_neq_i64x4(v, rm_i64x4s(s));
}
RM_INLINE boolx2 rm_lts_i64x2(const i64x2 v, const i64 s) {
    return rm_lt_i64x2(v, rm_i64x2s(s));
}
RM_INLINE boolx3 rm_lts_i64x3(const i64x3 v, const i64 s) {
    return rm_lt_i64x3(v, rm_i64x3s(s));
}
RM_INLINE boolx4 rm_lts_i64x4(const i64x4 v, const i64 s) {
    return rm_lt_i64x4(v, rm_i64x4s(s));
}
RM_INLINE boolx2 rm_lteqs_i64x2(const i64x2 v, const i64 s) {
    return rm_lteq_i64x2(v, rm_i64x2s(s));
}
RM_INLINE boolx3 rm_lteqs_i64x3(const i64x3 v, const i64 s) {
    return rm_lteq_i64x3(v, rm_i64x3s(s));
}
RM_INLINE boolx4 rm_lteqs_i64x4(const i64x4 v, const i64 s) {
    return rm_lteq_i64x4(v, rm_i64x4s(s));
}
RM_INLINE boolx2 rm_gts_i64x2(const i64x2 v, const i64 s) {
    return rm_gt_i64x2(v, rm_i64x2s(s));
}
RM_INLINE boolx3 rm_gts_i64x3(const i64x3 v, const i64 s) {
    return rm_gt_i64x3(v, rm_i64x3s(s));
}
RM_INLINE boolx4 rm_gts_i64x4(const i64x4 v, const i64 s) {
    return rm_gt_i64x4(v, rm_i64x4s(s));
}
RM_INLINE boolx2 rm_gteqs_i64x2(const i64x2 v, const i64 s) {
    return rm_gteq_i64x2(v, rm_i64x2s(s));
}
RM_INLINE boolx3 rm_gteqs_i64x3(const i64x3 v, const i64 s) {
    return rm_gteq_i64x3(v, rm_i64x3s(s));
}
RM_INLINE boolx4 rm_gteqs_i64x4(const i64x4 v, const i64 s) {
    return rm_gteq_i64x4(v, rm_i64x4s(s));
}
RM_INLINE bool rm_any_f32x2(const f32x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_f32x3(const f32x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_f32x4(const f32x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_f32x2(const f32x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_f32x3(const f32x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_f32x4(const f32x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_f32x2(const f32x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_f32x3(const f32x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_f32x4(const f32x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_f32x2(const f32x2 a, const f32x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_f32x3(const f32x3 a, const f32x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_f32x4(const f32x4 a, const f32x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_f32x2(const f32x2 a, const f32x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_f32x3(const f32x3 a, const f32x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_f32x4(const f32x4 a, const f32x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_f32x2(const f32x2 a, const f32x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_f32x3(const f32x3 a, const f32x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_f32x4(const f32x4 a, const f32x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_f32x2(const f32x2 a, const f32x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_f32x3(const f32x3 a, const f32x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_f32x4(const f32x4 a, const f32x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_f32x2(const f32x2 a, const f32x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_f32x3(const f32x3 a, const f32x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_f32x4(const f32x4 a, const f32x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_f32x2(const f32x2 a, const f32x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_f32x3(const f32x3 a, const f32x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_f32x4(const f32x4 a, const f32x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_f32x2(const f32x2 v, const f32 s) {
    return rm_eq_f32x2(v, rm_f32x2s(s));
}
RM_INLINE boolx3 rm_eqs_f32x3(const f32x3 v, const f32 s) {
    return rm_eq_f32x3(v, rm_f32x3s(s));
}
RM_INLINE boolx4 rm_eqs_f32x4(const f32x4 v, const f32 s) {
    return rm_eq_f32x4(v, rm_f32x4s(s));
}
RM_INLINE boolx2 rm_neqs_f32x2(const f32x2 v, const f32 s) {
    return rm_neq_f32x2(v, rm_f32x2s(s));
}
RM_INLINE boolx3 rm_neqs_f32x3(const f32x3 v, const f32 s) {
    return rm_neq_f32x3(v, rm_f32x3s(s));
}
RM_INLINE boolx4 rm_neqs_f32x4(const f32x4 v, const f32 s) {
    return rm_neq_f32x4(v, rm_f32x4s(s));
}
RM_INLINE boolx2 rm_lts_f32x2(const f32x2 v, const f32 s) {
    return rm_lt_f32x2(v, rm_f32x2s(s));
}
RM_INLINE boolx3 rm_lts_f32x3(const f32x3 v, const f32 s) {
    return rm_lt_f32x3(v, rm_f32x3s(s));
}
RM_INLINE boolx4 rm_lts_f32x4(const f32x4 v, const f32 s) {
    return rm_lt_f32x4(v, rm_f32x4s(s));
}
RM_INLINE boolx2 rm_lteqs_f32x2(const f32x2 v, const f32 s) {
    return rm_lteq_f32x2(v, rm_f32x2s(s));
}
RM_INLINE boolx3 rm_lteqs_f32x3(const f32x3 v, const f32 s) {
    return rm_lteq_f32x3(v, rm_f32x3s(s));
}
RM_INLINE boolx4 rm_lteqs_f32x4(const f32x4 v, const f32 s) {
    return rm_lteq_f32x4(v, rm_f32x4s(s));
}
RM_INLINE boolx2 rm_gts_f32x2(const f32x2 v, const f32 s) {
    return rm_gt_f32x2(v, rm_f32x2s(s));
}
RM_INLINE boolx3 rm_gts_f32x3(const f32x3 v, const f32 s) {
    return rm_gt_f32x3(v, rm_f32x3s(s));
}
RM_INLINE boolx4 rm_gts_f32x4(const f32x4 v, const f32 s) {
    return rm_gt_f32x4(v, rm_f32x4s(s));
}
RM_INLINE boolx2 rm_gteqs_f32x2(const f32x2 v, const f32 s) {
    return rm_gteq_f32x2(v, rm_f32x2s(s));
}
RM_INLINE boolx3 rm_gteqs_f32x3(const f32x3 v, const f32 s) {
    return rm_gteq_f32x3(v, rm_f32x3s(s));
}
RM_INLINE boolx4 rm_gteqs_f32x4(const f32x4 v, const f32 s) {
    return rm_gteq_f32x4(v, rm_f32x4s(s));
}
RM_INLINE bool rm_any_f64x2(const f64x2 v) {
    return v.x || v.y;
}
RM_INLINE bool rm_any_f64x3(const f64x2 v) {
    return (v.x || v.y) || v.z;
}
RM_INLINE bool rm_any_f64x4(const f64x2 v) {
    return (v.x || v.y) || (v.z || v.w);
}
RM_INLINE bool rm_all_f64x2(const f64x2 v) {
    return v.x && v.y;
}
RM_INLINE bool rm_all_f64x3(const f64x2 v) {
    return (v.x && v.y) && v.z;
}
RM_INLINE bool rm_all_f64x4(const f64x2 v) {
    return (v.x && v.y) && (v.z && v.w);
}
RM_INLINE boolx2 rm_not_f64x2(const f64x2 v) {
    return rm_boolx2(!v.x, !v.y);
}
RM_INLINE boolx3 rm_not_f64x3(const f64x3 v) {
    return rm_boolx3(!v.x, !v.y, !v.z);
}
RM_INLINE boolx4 rm_not_f64x4(const f64x4 v) {
    return rm_boolx4(!v.x, !v.y, !v.z, !v.w);
}
RM_INLINE boolx2 rm_eq_f64x2(const f64x2 a, const f64x2 b) {
    return rm_boolx2(a.x == b.x, a.y == b.y);
}
RM_INLINE boolx3 rm_eq_f64x3(const f64x3 a, const f64x3 b) {
    return rm_boolx3(a.x == b.x, a.y == b.y, a.z == b.z);
}
RM_INLINE boolx4 rm_eq_f64x4(const f64x4 a, const f64x4 b) {
    return rm_boolx4(a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w);
}
RM_INLINE boolx2 rm_neq_f64x2(const f64x2 a, const f64x2 b) {
    return rm_boolx2(a.x != b.x, a.y != b.y);
}
RM_INLINE boolx3 rm_neq_f64x3(const f64x3 a, const f64x3 b) {
    return rm_boolx3(a.x != b.x, a.y != b.y, a.z != b.z);
}
RM_INLINE boolx4 rm_neq_f64x4(const f64x4 a, const f64x4 b) {
    return rm_boolx4(a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w);
}
RM_INLINE boolx2 rm_lt_f64x2(const f64x2 a, const f64x2 b) {
    return rm_boolx2(a.x < b.x, a.y < b.y);
}
RM_INLINE boolx3 rm_lt_f64x3(const f64x3 a, const f64x3 b) {
    return rm_boolx3(a.x < b.x, a.y < b.y, a.z < b.z);
}
RM_INLINE boolx4 rm_lt_f64x4(const f64x4 a, const f64x4 b) {
    return rm_boolx4(a.x < b.x, a.y < b.y, a.z < b.z, a.w < b.w);
}
RM_INLINE boolx2 rm_lteq_f64x2(const f64x2 a, const f64x2 b) {
    return rm_boolx2(a.x <= b.x, a.y <= b.y);
}
RM_INLINE boolx3 rm_lteq_f64x3(const f64x3 a, const f64x3 b) {
    return rm_boolx3(a.x <= b.x, a.y <= b.y, a.z <= b.z);
}
RM_INLINE boolx4 rm_lteq_f64x4(const f64x4 a, const f64x4 b) {
    return rm_boolx4(a.x <= b.x, a.y <= b.y, a.z <= b.z, a.w <= b.w);
}
RM_INLINE boolx2 rm_gt_f64x2(const f64x2 a, const f64x2 b) {
    return rm_boolx2(a.x > b.x, a.y > b.y);
}
RM_INLINE boolx3 rm_gt_f64x3(const f64x3 a, const f64x3 b) {
    return rm_boolx3(a.x > b.x, a.y > b.y, a.z > b.z);
}
RM_INLINE boolx4 rm_gt_f64x4(const f64x4 a, const f64x4 b) {
    return rm_boolx4(a.x > b.x, a.y > b.y, a.z > b.z, a.w > b.w);
}
RM_INLINE boolx2 rm_gteq_f64x2(const f64x2 a, const f64x2 b) {
    return rm_boolx2(a.x >= b.x, a.y >= b.y);
}
RM_INLINE boolx3 rm_gteq_f64x3(const f64x3 a, const f64x3 b) {
    return rm_boolx3(a.x >= b.x, a.y >= b.y, a.z >= b.z);
}
RM_INLINE boolx4 rm_gteq_f64x4(const f64x4 a, const f64x4 b) {
    return rm_boolx4(a.x >= b.x, a.y >= b.y, a.z >= b.z, a.w >= b.w);
}
RM_INLINE boolx2 rm_eqs_f64x2(const f64x2 v, const f64 s) {
    return rm_eq_f64x2(v, rm_f64x2s(s));
}
RM_INLINE boolx3 rm_eqs_f64x3(const f64x3 v, const f64 s) {
    return rm_eq_f64x3(v, rm_f64x3s(s));
}
RM_INLINE boolx4 rm_eqs_f64x4(const f64x4 v, const f64 s) {
    return rm_eq_f64x4(v, rm_f64x4s(s));
}
RM_INLINE boolx2 rm_neqs_f64x2(const f64x2 v, const f64 s) {
    return rm_neq_f64x2(v, rm_f64x2s(s));
}
RM_INLINE boolx3 rm_neqs_f64x3(const f64x3 v, const f64 s) {
    return rm_neq_f64x3(v, rm_f64x3s(s));
}
RM_INLINE boolx4 rm_neqs_f64x4(const f64x4 v, const f64 s) {
    return rm_neq_f64x4(v, rm_f64x4s(s));
}
RM_INLINE boolx2 rm_lts_f64x2(const f64x2 v, const f64 s) {
    return rm_lt_f64x2(v, rm_f64x2s(s));
}
RM_INLINE boolx3 rm_lts_f64x3(const f64x3 v, const f64 s) {
    return rm_lt_f64x3(v, rm_f64x3s(s));
}
RM_INLINE boolx4 rm_lts_f64x4(const f64x4 v, const f64 s) {
    return rm_lt_f64x4(v, rm_f64x4s(s));
}
RM_INLINE boolx2 rm_lteqs_f64x2(const f64x2 v, const f64 s) {
    return rm_lteq_f64x2(v, rm_f64x2s(s));
}
RM_INLINE boolx3 rm_lteqs_f64x3(const f64x3 v, const f64 s) {
    return rm_lteq_f64x3(v, rm_f64x3s(s));
}
RM_INLINE boolx4 rm_lteqs_f64x4(const f64x4 v, const f64 s) {
    return rm_lteq_f64x4(v, rm_f64x4s(s));
}
RM_INLINE boolx2 rm_gts_f64x2(const f64x2 v, const f64 s) {
    return rm_gt_f64x2(v, rm_f64x2s(s));
}
RM_INLINE boolx3 rm_gts_f64x3(const f64x3 v, const f64 s) {
    return rm_gt_f64x3(v, rm_f64x3s(s));
}
RM_INLINE boolx4 rm_gts_f64x4(const f64x4 v, const f64 s) {
    return rm_gt_f64x4(v, rm_f64x4s(s));
}
RM_INLINE boolx2 rm_gteqs_f64x2(const f64x2 v, const f64 s) {
    return rm_gteq_f64x2(v, rm_f64x2s(s));
}
RM_INLINE boolx3 rm_gteqs_f64x3(const f64x3 v, const f64 s) {
    return rm_gteq_f64x3(v, rm_f64x3s(s));
}
RM_INLINE boolx4 rm_gteqs_f64x4(const f64x4 v, const f64 s) {
    return rm_gteq_f64x4(v, rm_f64x4s(s));
}
RM_INLINE i8x2 rm_neg_i8x2(const i8x2 v) {
    return rm_i8x2(-v.x, -v.y);
}
RM_INLINE i8x3 rm_neg_i8x3(const i8x3 v) {
    return rm_i8x3(-v.x, -v.y, -v.z);
}
RM_INLINE i8x4 rm_neg_i8x4(const i8x4 v) {
    return rm_i8x4(-v.x, -v.y, -v.z, -v.w);
}
RM_INLINE i8x2 rm_abs_i8x2(const i8x2 v) {
    return rm_i8x2(rm_abs_i8(v.x), rm_abs_i8(v.y));
}
RM_INLINE i8x3 rm_abs_i8x3(const i8x3 v) {
    return rm_i8x3(rm_abs_i8(v.x), rm_abs_i8(v.y), rm_abs_i8(v.z));
}
RM_INLINE i8x4 rm_abs_i8x4(const i8x4 v) {
    return rm_i8x4(rm_abs_i8(v.x), rm_abs_i8(v.y), rm_abs_i8(v.z), rm_abs_i8(v.w));
}
RM_INLINE i16x2 rm_neg_i16x2(const i16x2 v) {
    return rm_i16x2(-v.x, -v.y);
}
RM_INLINE i16x3 rm_neg_i16x3(const i16x3 v) {
    return rm_i16x3(-v.x, -v.y, -v.z);
}
RM_INLINE i16x4 rm_neg_i16x4(const i16x4 v) {
    return rm_i16x4(-v.x, -v.y, -v.z, -v.w);
}
RM_INLINE i16x2 rm_abs_i16x2(const i16x2 v) {
    return rm_i16x2(rm_abs_i16(v.x), rm_abs_i16(v.y));
}
RM_INLINE i16x3 rm_abs_i16x3(const i16x3 v) {
    return rm_i16x3(rm_abs_i16(v.x), rm_abs_i16(v.y), rm_abs_i16(v.z));
}
RM_INLINE i16x4 rm_abs_i16x4(const i16x4 v) {
    return rm_i16x4(rm_abs_i16(v.x), rm_abs_i16(v.y), rm_abs_i16(v.z), rm_abs_i16(v.w));
}
RM_INLINE i32x2 rm_neg_i32x2(const i32x2 v) {
    return rm_i32x2(-v.x, -v.y);
}
RM_INLINE i32x3 rm_neg_i32x3(const i32x3 v) {
    return rm_i32x3(-v.x, -v.y, -v.z);
}
RM_INLINE i32x4 rm_neg_i32x4(const i32x4 v) {
    return rm_i32x4(-v.x, -v.y, -v.z, -v.w);
}
RM_INLINE i32x2 rm_abs_i32x2(const i32x2 v) {
    return rm_i32x2(rm_abs_i32(v.x), rm_abs_i32(v.y));
}
RM_INLINE i32x3 rm_abs_i32x3(const i32x3 v) {
    return rm_i32x3(rm_abs_i32(v.x), rm_abs_i32(v.y), rm_abs_i32(v.z));
}
RM_INLINE i32x4 rm_abs_i32x4(const i32x4 v) {
    return rm_i32x4(rm_abs_i32(v.x), rm_abs_i32(v.y), rm_abs_i32(v.z), rm_abs_i32(v.w));
}
RM_INLINE i64x2 rm_neg_i64x2(const i64x2 v) {
    return rm_i64x2(-v.x, -v.y);
}
RM_INLINE i64x3 rm_neg_i64x3(const i64x3 v) {
    return rm_i64x3(-v.x, -v.y, -v.z);
}
RM_INLINE i64x4 rm_neg_i64x4(const i64x4 v) {
    return rm_i64x4(-v.x, -v.y, -v.z, -v.w);
}
RM_INLINE i64x2 rm_abs_i64x2(const i64x2 v) {
    return rm_i64x2(rm_abs_i64(v.x), rm_abs_i64(v.y));
}
RM_INLINE i64x3 rm_abs_i64x3(const i64x3 v) {
    return rm_i64x3(rm_abs_i64(v.x), rm_abs_i64(v.y), rm_abs_i64(v.z));
}
RM_INLINE i64x4 rm_abs_i64x4(const i64x4 v) {
    return rm_i64x4(rm_abs_i64(v.x), rm_abs_i64(v.y), rm_abs_i64(v.z), rm_abs_i64(v.w));
}
RM_INLINE f32x2 rm_neg_f32x2(const f32x2 v) {
    return rm_f32x2(-v.x, -v.y);
}
RM_INLINE f32x3 rm_neg_f32x3(const f32x3 v) {
    return rm_f32x3(-v.x, -v.y, -v.z);
}
RM_INLINE f32x4 rm_neg_f32x4(const f32x4 v) {
    return rm_f32x4(-v.x, -v.y, -v.z, -v.w);
}
RM_INLINE f32x2 rm_abs_f32x2(const f32x2 v) {
    return rm_f32x2(rm_abs_f32(v.x), rm_abs_f32(v.y));
}
RM_INLINE f32x3 rm_abs_f32x3(const f32x3 v) {
    return rm_f32x3(rm_abs_f32(v.x), rm_abs_f32(v.y), rm_abs_f32(v.z));
}
RM_INLINE f32x4 rm_abs_f32x4(const f32x4 v) {
    return rm_f32x4(rm_abs_f32(v.x), rm_abs_f32(v.y), rm_abs_f32(v.z), rm_abs_f32(v.w));
}
RM_INLINE f64x2 rm_neg_f64x2(const f64x2 v) {
    return rm_f64x2(-v.x, -v.y);
}
RM_INLINE f64x3 rm_neg_f64x3(const f64x3 v) {
    return rm_f64x3(-v.x, -v.y, -v.z);
}
RM_INLINE f64x4 rm_neg_f64x4(const f64x4 v) {
    return rm_f64x4(-v.x, -v.y, -v.z, -v.w);
}
RM_INLINE f64x2 rm_abs_f64x2(const f64x2 v) {
    return rm_f64x2(rm_abs_f64(v.x), rm_abs_f64(v.y));
}
RM_INLINE f64x3 rm_abs_f64x3(const f64x3 v) {
    return rm_f64x3(rm_abs_f64(v.x), rm_abs_f64(v.y), rm_abs_f64(v.z));
}
RM_INLINE f64x4 rm_abs_f64x4(const f64x4 v) {
    return rm_f64x4(rm_abs_f64(v.x), rm_abs_f64(v.y), rm_abs_f64(v.z), rm_abs_f64(v.w));
}
RM_INLINE u8x2 rm_min_u8x2(const u8x2 a, const u8x2 b) {
    return rm_u8x2(rm_min_u8(a.x, b.x), rm_min_u8(a.y, b.y));
}
RM_INLINE u8x3 rm_min_u8x3(const u8x3 a, const u8x3 b) {
    return rm_u8x3(rm_min_u8(a.x, b.x), rm_min_u8(a.y, b.y),
                    rm_min_u8(a.z, b.z));
}
RM_INLINE u8x4 rm_min_u8x4(const u8x4 a, const u8x4 b) {
    return rm_u8x4(rm_min_u8(a.x, b.x), rm_min_u8(a.y, b.y),
                    rm_min_u8(a.z, b.z), rm_min_u8(a.w, b.w));
}
RM_INLINE u8x2 rm_max_u8x2(const u8x2 a, const u8x2 b) {
    return rm_u8x2(rm_max_u8(a.x, b.x), rm_max_u8(a.y, b.y));
}
RM_INLINE u8x3 rm_max_u8x3(const u8x3 a, const u8x3 b) {
    return rm_u8x3(rm_max_u8(a.x, b.x), rm_max_u8(a.y, b.y),
                    rm_max_u8(a.z, b.z));
}
RM_INLINE u8x4 rm_max_u8x4(const u8x4 a, const u8x4 b) {
    return rm_u8x4(rm_max_u8(a.x, b.x), rm_max_u8(a.y, b.y),
                    rm_max_u8(a.z, b.z), rm_max_u8(a.w, b.w));
}
RM_INLINE u8x2 rm_add_u8x2(const u8x2 a, const u8x2 b) {
    return rm_u8x2(a.x + b.x, a.y + b.y);
}
RM_INLINE u8x3 rm_add_u8x3(const u8x3 a, const u8x3 b) {
    return rm_u8x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE u8x4 rm_add_u8x4(const u8x4 a, const u8x4 b) {
    return rm_u8x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE u8x2 rm_sub_u8x2(const u8x2 a, const u8x2 b) {
    return rm_u8x2(a.x - b.x, a.y - b.y);
}
RM_INLINE u8x3 rm_sub_u8x3(const u8x3 a, const u8x3 b) {
    return rm_u8x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE u8x4 rm_sub_u8x4(const u8x4 a, const u8x4 b) {
    return rm_u8x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE u8x2 rm_mul_u8x2(const u8x2 a, const u8x2 b) {
    return rm_u8x2(a.x * b.x, a.y * b.y);
}
RM_INLINE u8x3 rm_mul_u8x3(const u8x3 a, const u8x3 b) {
    return rm_u8x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE u8x4 rm_mul_u8x4(const u8x4 a, const u8x4 b) {
    return rm_u8x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE u8x2 rm_div_u8x2(const u8x2 a, const u8x2 b) {
    return rm_u8x2(a.x / b.x, a.y / b.y);
}
RM_INLINE u8x3 rm_div_u8x3(const u8x3 a, const u8x3 b) {
    return rm_u8x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE u8x4 rm_div_u8x4(const u8x4 a, const u8x4 b) {
    return rm_u8x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE u8x2 rm_mod_u8x2(const u8x2 a, const u8x2 b) {
    return rm_u8x2(rm_mod_u8(a.x, b.x), rm_mod_u8(a.y, b.y));
}
RM_INLINE u8x3 rm_mod_u8x3(const u8x3 a, const u8x3 b) {
    return rm_u8x3(rm_mod_u8(a.x, b.x), rm_mod_u8(a.y, b.y),
                    rm_mod_u8(a.z, b.z));
}
RM_INLINE u8x4 rm_mod_u8x4(const u8x4 a, const u8x4 b) {
    return rm_u8x4(rm_mod_u8(a.x, b.x), rm_mod_u8(a.y, b.y),
                    rm_mod_u8(a.z, b.z), rm_mod_u8(a.w, b.w));
}
RM_INLINE u8x2 rm_clamp_u8x2(const u8x2 v, const u8x2 min, const u8x2 max) {
    return rm_u8x2(rm_clamp_u8(v.x, min.x, max.x), rm_clamp_u8(v.y, min.y, max.y));
}
RM_INLINE u8x3 rm_clamp_u8x3(const u8x3 v, const u8x3 min, const u8x3 max) {
    return rm_u8x3(rm_clamp_u8(v.x, min.x, max.x), rm_clamp_u8(v.y, min.y, max.y),
                    rm_clamp_u8(v.z, min.z, max.z));
}
RM_INLINE u8x4 rm_clamp_u8x4(const u8x4 v, const u8x4 min, const u8x4 max) {
    return rm_u8x4(rm_clamp_u8(v.x, min.x, max.x), rm_clamp_u8(v.y, min.y, max.y),
                    rm_clamp_u8(v.z, min.z, max.z), rm_clamp_u8(v.w, min.w, max.w));
}
RM_INLINE u8x2 rm_fma_u8x2(const u8x2 a, const u8x2 b, const u8x2 c) {
    return rm_add_u8x2(rm_mul_u8x2(a, b), c);
}
RM_INLINE u8x3 rm_fma_u8x3(const u8x3 a, const u8x3 b, const u8x3 c) {
    return rm_add_u8x3(rm_mul_u8x3(a, b), c);
}
RM_INLINE u8x4 rm_fma_u8x4(const u8x4 a, const u8x4 b, const u8x4 c) {
    return rm_add_u8x4(rm_mul_u8x4(a, b), c);
}
RM_INLINE u8x2 rm_mins_u8x2(const u8x2 v, const u8 s) {
    return rm_min_u8x2(v, rm_u8x2s(s));
}
RM_INLINE u8x3 rm_mins_u8x3(const u8x3 v, const u8 s) {
    return rm_min_u8x3(v, rm_u8x3s(s));
}
RM_INLINE u8x4 rm_mins_u8x4(const u8x4 v, const u8 s) {
    return rm_min_u8x4(v, rm_u8x4s(s));
}
RM_INLINE u8x2 rm_maxs_u8x2(const u8x2 v, const u8 s) {
    return rm_max_u8x2(v, rm_u8x2s(s));
}
RM_INLINE u8x3 rm_maxs_u8x3(const u8x3 v, const u8 s) {
    return rm_max_u8x3(v, rm_u8x3s(s));
}
RM_INLINE u8x4 rm_maxs_u8x4(const u8x4 v, const u8 s) {
    return rm_max_u8x4(v, rm_u8x4s(s));
}
RM_INLINE u8x2 rm_adds_u8x2(const u8x2 v, const u8 s) {
    return rm_add_u8x2(v, rm_u8x2s(s));
}
RM_INLINE u8x3 rm_adds_u8x3(const u8x3 v, const u8 s) {
    return rm_add_u8x3(v, rm_u8x3s(s));
}
RM_INLINE u8x4 rm_adds_u8x4(const u8x4 v, const u8 s) {
    return rm_add_u8x4(v, rm_u8x4s(s));
}
RM_INLINE u8x2 rm_subs_u8x2(const u8x2 v, const u8 s) {
    return rm_sub_u8x2(v, rm_u8x2s(s));
}
RM_INLINE u8x2 rm_ssub_u8x2(const u8 s, const u8x2 v) {
    return rm_sub_u8x2(rm_u8x2s(s), v);
}
RM_INLINE u8x3 rm_subs_u8x3(const u8x3 v, const u8 s) {
    return rm_sub_u8x3(v, rm_u8x3s(s));
}
RM_INLINE u8x3 rm_ssub_u8x3(const u8 s, const u8x3 v) {
    return rm_sub_u8x3(rm_u8x3s(s), v);
}
RM_INLINE u8x4 rm_subs_u8x4(const u8x4 v, const u8 s) {
    return rm_sub_u8x4(v, rm_u8x4s(s));
}
RM_INLINE u8x4 rm_ssub_u8x4(const u8 s, const u8x4 v) {
    return rm_sub_u8x4(rm_u8x4s(s), v);
}
RM_INLINE u8x2 rm_muls_u8x2(const u8x2 v, const u8 s) {
    return rm_mul_u8x2(v, rm_u8x2s(s));
}
RM_INLINE u8x3 rm_muls_u8x3(const u8x3 v, const u8 s) {
    return rm_mul_u8x3(v, rm_u8x3s(s));
}
RM_INLINE u8x4 rm_muls_u8x4(const u8x4 v, const u8 s) {
    return rm_mul_u8x4(v, rm_u8x4s(s));
}
RM_INLINE u8x2 rm_divs_u8x2(const u8x2 v, const u8 s) {
    return rm_div_u8x2(v, rm_u8x2s(s));
}
RM_INLINE u8x2 rm_sdiv_u8x2(const u8 s, const u8x2 v) {
    return rm_div_u8x2(rm_u8x2s(s), v);
}
RM_INLINE u8x3 rm_divs_u8x3(const u8x3 v, const u8 s) {
    return rm_div_u8x3(v, rm_u8x3s(s));
}
RM_INLINE u8x3 rm_sdiv_u8x3(const u8 s, const u8x3 v) {
    return rm_div_u8x3(rm_u8x3s(s), v);
}
RM_INLINE u8x4 rm_divs_u8x4(const u8x4 v, const u8 s) {
    return rm_div_u8x4(v, rm_u8x4s(s));
}
RM_INLINE u8x4 rm_sdiv_u8x4(const u8 s, const u8x4 v) {
    return rm_div_u8x4(rm_u8x4s(s), v);
}
RM_INLINE u8x2 rm_mods_u8x2(const u8x2 v, const u8 s) {
    return rm_mod_u8x2(v, rm_u8x2s(s));
}
RM_INLINE u8x2 rm_smod_u8x2(const u8 s, const u8x2 v) {
    return rm_mod_u8x2(rm_u8x2s(s), v);
}
RM_INLINE u8x3 rm_mods_u8x3(const u8x3 v, const u8 s) {
    return rm_mod_u8x3(v, rm_u8x3s(s));
}
RM_INLINE u8x3 rm_smod_u8x3(const u8 s, const u8x3 v) {
    return rm_mod_u8x3(rm_u8x3s(s), v);
}
RM_INLINE u8x4 rm_mods_u8x4(const u8x4 v, const u8 s) {
    return rm_mod_u8x4(v, rm_u8x4s(s));
}
RM_INLINE u8x4 rm_smod_u8x4(const u8 s, const u8x4 v) {
    return rm_mod_u8x4(rm_u8x4s(s), v);
}
RM_INLINE u8x2 rm_clamps_u8x2(const u8x2 v, u8 min, u8 max) {
    return rm_clamp_u8x2(v, rm_u8x2s(min), rm_u8x2s(max));
}
RM_INLINE u8x2 rm_fmas_u8x2(const u8x2 a, const u8x2 b, const u8 c) {
    return rm_adds_u8x2(rm_mul_u8x2(a, b), c);
}
RM_INLINE u8x2 rm_fmass_u8x2(const u8x2 a, const u8 b, const u8 c) {
    return rm_adds_u8x2(rm_muls_u8x2(a, b), c);
}
RM_INLINE u8x3 rm_clamps_u8x3(const u8x3 v, u8 min, u8 max) {
    return rm_clamp_u8x3(v, rm_u8x3s(min), rm_u8x3s(max));
}
RM_INLINE u8x3 rm_fmas_u8x3(const u8x3 a, const u8x3 b, const u8 c) {
    return rm_adds_u8x3(rm_mul_u8x3(a, b), c);
}
RM_INLINE u8x3 rm_fmass_u8x3(const u8x3 a, const u8 b, const u8 c) {
    return rm_adds_u8x3(rm_muls_u8x3(a, b), c);
}
RM_INLINE u8x4 rm_clamps_u8x4(const u8x4 v, u8 min, u8 max) {
    return rm_clamp_u8x4(v, rm_u8x4s(min), rm_u8x4s(max));
}
RM_INLINE u8x4 rm_fmas_u8x4(const u8x4 a, const u8x4 b, const u8 c) {
    return rm_adds_u8x4(rm_mul_u8x4(a, b), c);
}
RM_INLINE u8x4 rm_fmass_u8x4(const u8x4 a, const u8 b, const u8 c) {
    return rm_adds_u8x4(rm_muls_u8x4(a, b), c);
}
RM_INLINE u16x2 rm_min_u16x2(const u16x2 a, const u16x2 b) {
    return rm_u16x2(rm_min_u16(a.x, b.x), rm_min_u16(a.y, b.y));
}
RM_INLINE u16x3 rm_min_u16x3(const u16x3 a, const u16x3 b) {
    return rm_u16x3(rm_min_u16(a.x, b.x), rm_min_u16(a.y, b.y),
                    rm_min_u16(a.z, b.z));
}
RM_INLINE u16x4 rm_min_u16x4(const u16x4 a, const u16x4 b) {
    return rm_u16x4(rm_min_u16(a.x, b.x), rm_min_u16(a.y, b.y),
                    rm_min_u16(a.z, b.z), rm_min_u16(a.w, b.w));
}
RM_INLINE u16x2 rm_max_u16x2(const u16x2 a, const u16x2 b) {
    return rm_u16x2(rm_max_u16(a.x, b.x), rm_max_u16(a.y, b.y));
}
RM_INLINE u16x3 rm_max_u16x3(const u16x3 a, const u16x3 b) {
    return rm_u16x3(rm_max_u16(a.x, b.x), rm_max_u16(a.y, b.y),
                    rm_max_u16(a.z, b.z));
}
RM_INLINE u16x4 rm_max_u16x4(const u16x4 a, const u16x4 b) {
    return rm_u16x4(rm_max_u16(a.x, b.x), rm_max_u16(a.y, b.y),
                    rm_max_u16(a.z, b.z), rm_max_u16(a.w, b.w));
}
RM_INLINE u16x2 rm_add_u16x2(const u16x2 a, const u16x2 b) {
    return rm_u16x2(a.x + b.x, a.y + b.y);
}
RM_INLINE u16x3 rm_add_u16x3(const u16x3 a, const u16x3 b) {
    return rm_u16x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE u16x4 rm_add_u16x4(const u16x4 a, const u16x4 b) {
    return rm_u16x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE u16x2 rm_sub_u16x2(const u16x2 a, const u16x2 b) {
    return rm_u16x2(a.x - b.x, a.y - b.y);
}
RM_INLINE u16x3 rm_sub_u16x3(const u16x3 a, const u16x3 b) {
    return rm_u16x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE u16x4 rm_sub_u16x4(const u16x4 a, const u16x4 b) {
    return rm_u16x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE u16x2 rm_mul_u16x2(const u16x2 a, const u16x2 b) {
    return rm_u16x2(a.x * b.x, a.y * b.y);
}
RM_INLINE u16x3 rm_mul_u16x3(const u16x3 a, const u16x3 b) {
    return rm_u16x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE u16x4 rm_mul_u16x4(const u16x4 a, const u16x4 b) {
    return rm_u16x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE u16x2 rm_div_u16x2(const u16x2 a, const u16x2 b) {
    return rm_u16x2(a.x / b.x, a.y / b.y);
}
RM_INLINE u16x3 rm_div_u16x3(const u16x3 a, const u16x3 b) {
    return rm_u16x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE u16x4 rm_div_u16x4(const u16x4 a, const u16x4 b) {
    return rm_u16x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE u16x2 rm_mod_u16x2(const u16x2 a, const u16x2 b) {
    return rm_u16x2(rm_mod_u16(a.x, b.x), rm_mod_u16(a.y, b.y));
}
RM_INLINE u16x3 rm_mod_u16x3(const u16x3 a, const u16x3 b) {
    return rm_u16x3(rm_mod_u16(a.x, b.x), rm_mod_u16(a.y, b.y),
                    rm_mod_u16(a.z, b.z));
}
RM_INLINE u16x4 rm_mod_u16x4(const u16x4 a, const u16x4 b) {
    return rm_u16x4(rm_mod_u16(a.x, b.x), rm_mod_u16(a.y, b.y),
                    rm_mod_u16(a.z, b.z), rm_mod_u16(a.w, b.w));
}
RM_INLINE u16x2 rm_clamp_u16x2(const u16x2 v, const u16x2 min, const u16x2 max) {
    return rm_u16x2(rm_clamp_u16(v.x, min.x, max.x), rm_clamp_u16(v.y, min.y, max.y));
}
RM_INLINE u16x3 rm_clamp_u16x3(const u16x3 v, const u16x3 min, const u16x3 max) {
    return rm_u16x3(rm_clamp_u16(v.x, min.x, max.x), rm_clamp_u16(v.y, min.y, max.y),
                    rm_clamp_u16(v.z, min.z, max.z));
}
RM_INLINE u16x4 rm_clamp_u16x4(const u16x4 v, const u16x4 min, const u16x4 max) {
    return rm_u16x4(rm_clamp_u16(v.x, min.x, max.x), rm_clamp_u16(v.y, min.y, max.y),
                    rm_clamp_u16(v.z, min.z, max.z), rm_clamp_u16(v.w, min.w, max.w));
}
RM_INLINE u16x2 rm_fma_u16x2(const u16x2 a, const u16x2 b, const u16x2 c) {
    return rm_add_u16x2(rm_mul_u16x2(a, b), c);
}
RM_INLINE u16x3 rm_fma_u16x3(const u16x3 a, const u16x3 b, const u16x3 c) {
    return rm_add_u16x3(rm_mul_u16x3(a, b), c);
}
RM_INLINE u16x4 rm_fma_u16x4(const u16x4 a, const u16x4 b, const u16x4 c) {
    return rm_add_u16x4(rm_mul_u16x4(a, b), c);
}
RM_INLINE u16x2 rm_mins_u16x2(const u16x2 v, const u16 s) {
    return rm_min_u16x2(v, rm_u16x2s(s));
}
RM_INLINE u16x3 rm_mins_u16x3(const u16x3 v, const u16 s) {
    return rm_min_u16x3(v, rm_u16x3s(s));
}
RM_INLINE u16x4 rm_mins_u16x4(const u16x4 v, const u16 s) {
    return rm_min_u16x4(v, rm_u16x4s(s));
}
RM_INLINE u16x2 rm_maxs_u16x2(const u16x2 v, const u16 s) {
    return rm_max_u16x2(v, rm_u16x2s(s));
}
RM_INLINE u16x3 rm_maxs_u16x3(const u16x3 v, const u16 s) {
    return rm_max_u16x3(v, rm_u16x3s(s));
}
RM_INLINE u16x4 rm_maxs_u16x4(const u16x4 v, const u16 s) {
    return rm_max_u16x4(v, rm_u16x4s(s));
}
RM_INLINE u16x2 rm_adds_u16x2(const u16x2 v, const u16 s) {
    return rm_add_u16x2(v, rm_u16x2s(s));
}
RM_INLINE u16x3 rm_adds_u16x3(const u16x3 v, const u16 s) {
    return rm_add_u16x3(v, rm_u16x3s(s));
}
RM_INLINE u16x4 rm_adds_u16x4(const u16x4 v, const u16 s) {
    return rm_add_u16x4(v, rm_u16x4s(s));
}
RM_INLINE u16x2 rm_subs_u16x2(const u16x2 v, const u16 s) {
    return rm_sub_u16x2(v, rm_u16x2s(s));
}
RM_INLINE u16x2 rm_ssub_u16x2(const u16 s, const u16x2 v) {
    return rm_sub_u16x2(rm_u16x2s(s), v);
}
RM_INLINE u16x3 rm_subs_u16x3(const u16x3 v, const u16 s) {
    return rm_sub_u16x3(v, rm_u16x3s(s));
}
RM_INLINE u16x3 rm_ssub_u16x3(const u16 s, const u16x3 v) {
    return rm_sub_u16x3(rm_u16x3s(s), v);
}
RM_INLINE u16x4 rm_subs_u16x4(const u16x4 v, const u16 s) {
    return rm_sub_u16x4(v, rm_u16x4s(s));
}
RM_INLINE u16x4 rm_ssub_u16x4(const u16 s, const u16x4 v) {
    return rm_sub_u16x4(rm_u16x4s(s), v);
}
RM_INLINE u16x2 rm_muls_u16x2(const u16x2 v, const u16 s) {
    return rm_mul_u16x2(v, rm_u16x2s(s));
}
RM_INLINE u16x3 rm_muls_u16x3(const u16x3 v, const u16 s) {
    return rm_mul_u16x3(v, rm_u16x3s(s));
}
RM_INLINE u16x4 rm_muls_u16x4(const u16x4 v, const u16 s) {
    return rm_mul_u16x4(v, rm_u16x4s(s));
}
RM_INLINE u16x2 rm_divs_u16x2(const u16x2 v, const u16 s) {
    return rm_div_u16x2(v, rm_u16x2s(s));
}
RM_INLINE u16x2 rm_sdiv_u16x2(const u16 s, const u16x2 v) {
    return rm_div_u16x2(rm_u16x2s(s), v);
}
RM_INLINE u16x3 rm_divs_u16x3(const u16x3 v, const u16 s) {
    return rm_div_u16x3(v, rm_u16x3s(s));
}
RM_INLINE u16x3 rm_sdiv_u16x3(const u16 s, const u16x3 v) {
    return rm_div_u16x3(rm_u16x3s(s), v);
}
RM_INLINE u16x4 rm_divs_u16x4(const u16x4 v, const u16 s) {
    return rm_div_u16x4(v, rm_u16x4s(s));
}
RM_INLINE u16x4 rm_sdiv_u16x4(const u16 s, const u16x4 v) {
    return rm_div_u16x4(rm_u16x4s(s), v);
}
RM_INLINE u16x2 rm_mods_u16x2(const u16x2 v, const u16 s) {
    return rm_mod_u16x2(v, rm_u16x2s(s));
}
RM_INLINE u16x2 rm_smod_u16x2(const u16 s, const u16x2 v) {
    return rm_mod_u16x2(rm_u16x2s(s), v);
}
RM_INLINE u16x3 rm_mods_u16x3(const u16x3 v, const u16 s) {
    return rm_mod_u16x3(v, rm_u16x3s(s));
}
RM_INLINE u16x3 rm_smod_u16x3(const u16 s, const u16x3 v) {
    return rm_mod_u16x3(rm_u16x3s(s), v);
}
RM_INLINE u16x4 rm_mods_u16x4(const u16x4 v, const u16 s) {
    return rm_mod_u16x4(v, rm_u16x4s(s));
}
RM_INLINE u16x4 rm_smod_u16x4(const u16 s, const u16x4 v) {
    return rm_mod_u16x4(rm_u16x4s(s), v);
}
RM_INLINE u16x2 rm_clamps_u16x2(const u16x2 v, u16 min, u16 max) {
    return rm_clamp_u16x2(v, rm_u16x2s(min), rm_u16x2s(max));
}
RM_INLINE u16x2 rm_fmas_u16x2(const u16x2 a, const u16x2 b, const u16 c) {
    return rm_adds_u16x2(rm_mul_u16x2(a, b), c);
}
RM_INLINE u16x2 rm_fmass_u16x2(const u16x2 a, const u16 b, const u16 c) {
    return rm_adds_u16x2(rm_muls_u16x2(a, b), c);
}
RM_INLINE u16x3 rm_clamps_u16x3(const u16x3 v, u16 min, u16 max) {
    return rm_clamp_u16x3(v, rm_u16x3s(min), rm_u16x3s(max));
}
RM_INLINE u16x3 rm_fmas_u16x3(const u16x3 a, const u16x3 b, const u16 c) {
    return rm_adds_u16x3(rm_mul_u16x3(a, b), c);
}
RM_INLINE u16x3 rm_fmass_u16x3(const u16x3 a, const u16 b, const u16 c) {
    return rm_adds_u16x3(rm_muls_u16x3(a, b), c);
}
RM_INLINE u16x4 rm_clamps_u16x4(const u16x4 v, u16 min, u16 max) {
    return rm_clamp_u16x4(v, rm_u16x4s(min), rm_u16x4s(max));
}
RM_INLINE u16x4 rm_fmas_u16x4(const u16x4 a, const u16x4 b, const u16 c) {
    return rm_adds_u16x4(rm_mul_u16x4(a, b), c);
}
RM_INLINE u16x4 rm_fmass_u16x4(const u16x4 a, const u16 b, const u16 c) {
    return rm_adds_u16x4(rm_muls_u16x4(a, b), c);
}
RM_INLINE u32x2 rm_min_u32x2(const u32x2 a, const u32x2 b) {
    return rm_u32x2(rm_min_u32(a.x, b.x), rm_min_u32(a.y, b.y));
}
RM_INLINE u32x3 rm_min_u32x3(const u32x3 a, const u32x3 b) {
    return rm_u32x3(rm_min_u32(a.x, b.x), rm_min_u32(a.y, b.y),
                    rm_min_u32(a.z, b.z));
}
RM_INLINE u32x4 rm_min_u32x4(const u32x4 a, const u32x4 b) {
    return rm_u32x4(rm_min_u32(a.x, b.x), rm_min_u32(a.y, b.y),
                    rm_min_u32(a.z, b.z), rm_min_u32(a.w, b.w));
}
RM_INLINE u32x2 rm_max_u32x2(const u32x2 a, const u32x2 b) {
    return rm_u32x2(rm_max_u32(a.x, b.x), rm_max_u32(a.y, b.y));
}
RM_INLINE u32x3 rm_max_u32x3(const u32x3 a, const u32x3 b) {
    return rm_u32x3(rm_max_u32(a.x, b.x), rm_max_u32(a.y, b.y),
                    rm_max_u32(a.z, b.z));
}
RM_INLINE u32x4 rm_max_u32x4(const u32x4 a, const u32x4 b) {
    return rm_u32x4(rm_max_u32(a.x, b.x), rm_max_u32(a.y, b.y),
                    rm_max_u32(a.z, b.z), rm_max_u32(a.w, b.w));
}
RM_INLINE u32x2 rm_add_u32x2(const u32x2 a, const u32x2 b) {
    return rm_u32x2(a.x + b.x, a.y + b.y);
}
RM_INLINE u32x3 rm_add_u32x3(const u32x3 a, const u32x3 b) {
    return rm_u32x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE u32x4 rm_add_u32x4(const u32x4 a, const u32x4 b) {
    return rm_u32x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE u32x2 rm_sub_u32x2(const u32x2 a, const u32x2 b) {
    return rm_u32x2(a.x - b.x, a.y - b.y);
}
RM_INLINE u32x3 rm_sub_u32x3(const u32x3 a, const u32x3 b) {
    return rm_u32x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE u32x4 rm_sub_u32x4(const u32x4 a, const u32x4 b) {
    return rm_u32x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE u32x2 rm_mul_u32x2(const u32x2 a, const u32x2 b) {
    return rm_u32x2(a.x * b.x, a.y * b.y);
}
RM_INLINE u32x3 rm_mul_u32x3(const u32x3 a, const u32x3 b) {
    return rm_u32x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE u32x4 rm_mul_u32x4(const u32x4 a, const u32x4 b) {
    return rm_u32x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE u32x2 rm_div_u32x2(const u32x2 a, const u32x2 b) {
    return rm_u32x2(a.x / b.x, a.y / b.y);
}
RM_INLINE u32x3 rm_div_u32x3(const u32x3 a, const u32x3 b) {
    return rm_u32x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE u32x4 rm_div_u32x4(const u32x4 a, const u32x4 b) {
    return rm_u32x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE u32x2 rm_mod_u32x2(const u32x2 a, const u32x2 b) {
    return rm_u32x2(rm_mod_u32(a.x, b.x), rm_mod_u32(a.y, b.y));
}
RM_INLINE u32x3 rm_mod_u32x3(const u32x3 a, const u32x3 b) {
    return rm_u32x3(rm_mod_u32(a.x, b.x), rm_mod_u32(a.y, b.y),
                    rm_mod_u32(a.z, b.z));
}
RM_INLINE u32x4 rm_mod_u32x4(const u32x4 a, const u32x4 b) {
    return rm_u32x4(rm_mod_u32(a.x, b.x), rm_mod_u32(a.y, b.y),
                    rm_mod_u32(a.z, b.z), rm_mod_u32(a.w, b.w));
}
RM_INLINE u32x2 rm_clamp_u32x2(const u32x2 v, const u32x2 min, const u32x2 max) {
    return rm_u32x2(rm_clamp_u32(v.x, min.x, max.x), rm_clamp_u32(v.y, min.y, max.y));
}
RM_INLINE u32x3 rm_clamp_u32x3(const u32x3 v, const u32x3 min, const u32x3 max) {
    return rm_u32x3(rm_clamp_u32(v.x, min.x, max.x), rm_clamp_u32(v.y, min.y, max.y),
                    rm_clamp_u32(v.z, min.z, max.z));
}
RM_INLINE u32x4 rm_clamp_u32x4(const u32x4 v, const u32x4 min, const u32x4 max) {
    return rm_u32x4(rm_clamp_u32(v.x, min.x, max.x), rm_clamp_u32(v.y, min.y, max.y),
                    rm_clamp_u32(v.z, min.z, max.z), rm_clamp_u32(v.w, min.w, max.w));
}
RM_INLINE u32x2 rm_fma_u32x2(const u32x2 a, const u32x2 b, const u32x2 c) {
    return rm_add_u32x2(rm_mul_u32x2(a, b), c);
}
RM_INLINE u32x3 rm_fma_u32x3(const u32x3 a, const u32x3 b, const u32x3 c) {
    return rm_add_u32x3(rm_mul_u32x3(a, b), c);
}
RM_INLINE u32x4 rm_fma_u32x4(const u32x4 a, const u32x4 b, const u32x4 c) {
    return rm_add_u32x4(rm_mul_u32x4(a, b), c);
}
RM_INLINE u32x2 rm_mins_u32x2(const u32x2 v, const u32 s) {
    return rm_min_u32x2(v, rm_u32x2s(s));
}
RM_INLINE u32x3 rm_mins_u32x3(const u32x3 v, const u32 s) {
    return rm_min_u32x3(v, rm_u32x3s(s));
}
RM_INLINE u32x4 rm_mins_u32x4(const u32x4 v, const u32 s) {
    return rm_min_u32x4(v, rm_u32x4s(s));
}
RM_INLINE u32x2 rm_maxs_u32x2(const u32x2 v, const u32 s) {
    return rm_max_u32x2(v, rm_u32x2s(s));
}
RM_INLINE u32x3 rm_maxs_u32x3(const u32x3 v, const u32 s) {
    return rm_max_u32x3(v, rm_u32x3s(s));
}
RM_INLINE u32x4 rm_maxs_u32x4(const u32x4 v, const u32 s) {
    return rm_max_u32x4(v, rm_u32x4s(s));
}
RM_INLINE u32x2 rm_adds_u32x2(const u32x2 v, const u32 s) {
    return rm_add_u32x2(v, rm_u32x2s(s));
}
RM_INLINE u32x3 rm_adds_u32x3(const u32x3 v, const u32 s) {
    return rm_add_u32x3(v, rm_u32x3s(s));
}
RM_INLINE u32x4 rm_adds_u32x4(const u32x4 v, const u32 s) {
    return rm_add_u32x4(v, rm_u32x4s(s));
}
RM_INLINE u32x2 rm_subs_u32x2(const u32x2 v, const u32 s) {
    return rm_sub_u32x2(v, rm_u32x2s(s));
}
RM_INLINE u32x2 rm_ssub_u32x2(const u32 s, const u32x2 v) {
    return rm_sub_u32x2(rm_u32x2s(s), v);
}
RM_INLINE u32x3 rm_subs_u32x3(const u32x3 v, const u32 s) {
    return rm_sub_u32x3(v, rm_u32x3s(s));
}
RM_INLINE u32x3 rm_ssub_u32x3(const u32 s, const u32x3 v) {
    return rm_sub_u32x3(rm_u32x3s(s), v);
}
RM_INLINE u32x4 rm_subs_u32x4(const u32x4 v, const u32 s) {
    return rm_sub_u32x4(v, rm_u32x4s(s));
}
RM_INLINE u32x4 rm_ssub_u32x4(const u32 s, const u32x4 v) {
    return rm_sub_u32x4(rm_u32x4s(s), v);
}
RM_INLINE u32x2 rm_muls_u32x2(const u32x2 v, const u32 s) {
    return rm_mul_u32x2(v, rm_u32x2s(s));
}
RM_INLINE u32x3 rm_muls_u32x3(const u32x3 v, const u32 s) {
    return rm_mul_u32x3(v, rm_u32x3s(s));
}
RM_INLINE u32x4 rm_muls_u32x4(const u32x4 v, const u32 s) {
    return rm_mul_u32x4(v, rm_u32x4s(s));
}
RM_INLINE u32x2 rm_divs_u32x2(const u32x2 v, const u32 s) {
    return rm_div_u32x2(v, rm_u32x2s(s));
}
RM_INLINE u32x2 rm_sdiv_u32x2(const u32 s, const u32x2 v) {
    return rm_div_u32x2(rm_u32x2s(s), v);
}
RM_INLINE u32x3 rm_divs_u32x3(const u32x3 v, const u32 s) {
    return rm_div_u32x3(v, rm_u32x3s(s));
}
RM_INLINE u32x3 rm_sdiv_u32x3(const u32 s, const u32x3 v) {
    return rm_div_u32x3(rm_u32x3s(s), v);
}
RM_INLINE u32x4 rm_divs_u32x4(const u32x4 v, const u32 s) {
    return rm_div_u32x4(v, rm_u32x4s(s));
}
RM_INLINE u32x4 rm_sdiv_u32x4(const u32 s, const u32x4 v) {
    return rm_div_u32x4(rm_u32x4s(s), v);
}
RM_INLINE u32x2 rm_mods_u32x2(const u32x2 v, const u32 s) {
    return rm_mod_u32x2(v, rm_u32x2s(s));
}
RM_INLINE u32x2 rm_smod_u32x2(const u32 s, const u32x2 v) {
    return rm_mod_u32x2(rm_u32x2s(s), v);
}
RM_INLINE u32x3 rm_mods_u32x3(const u32x3 v, const u32 s) {
    return rm_mod_u32x3(v, rm_u32x3s(s));
}
RM_INLINE u32x3 rm_smod_u32x3(const u32 s, const u32x3 v) {
    return rm_mod_u32x3(rm_u32x3s(s), v);
}
RM_INLINE u32x4 rm_mods_u32x4(const u32x4 v, const u32 s) {
    return rm_mod_u32x4(v, rm_u32x4s(s));
}
RM_INLINE u32x4 rm_smod_u32x4(const u32 s, const u32x4 v) {
    return rm_mod_u32x4(rm_u32x4s(s), v);
}
RM_INLINE u32x2 rm_clamps_u32x2(const u32x2 v, u32 min, u32 max) {
    return rm_clamp_u32x2(v, rm_u32x2s(min), rm_u32x2s(max));
}
RM_INLINE u32x2 rm_fmas_u32x2(const u32x2 a, const u32x2 b, const u32 c) {
    return rm_adds_u32x2(rm_mul_u32x2(a, b), c);
}
RM_INLINE u32x2 rm_fmass_u32x2(const u32x2 a, const u32 b, const u32 c) {
    return rm_adds_u32x2(rm_muls_u32x2(a, b), c);
}
RM_INLINE u32x3 rm_clamps_u32x3(const u32x3 v, u32 min, u32 max) {
    return rm_clamp_u32x3(v, rm_u32x3s(min), rm_u32x3s(max));
}
RM_INLINE u32x3 rm_fmas_u32x3(const u32x3 a, const u32x3 b, const u32 c) {
    return rm_adds_u32x3(rm_mul_u32x3(a, b), c);
}
RM_INLINE u32x3 rm_fmass_u32x3(const u32x3 a, const u32 b, const u32 c) {
    return rm_adds_u32x3(rm_muls_u32x3(a, b), c);
}
RM_INLINE u32x4 rm_clamps_u32x4(const u32x4 v, u32 min, u32 max) {
    return rm_clamp_u32x4(v, rm_u32x4s(min), rm_u32x4s(max));
}
RM_INLINE u32x4 rm_fmas_u32x4(const u32x4 a, const u32x4 b, const u32 c) {
    return rm_adds_u32x4(rm_mul_u32x4(a, b), c);
}
RM_INLINE u32x4 rm_fmass_u32x4(const u32x4 a, const u32 b, const u32 c) {
    return rm_adds_u32x4(rm_muls_u32x4(a, b), c);
}
RM_INLINE u64x2 rm_min_u64x2(const u64x2 a, const u64x2 b) {
    return rm_u64x2(rm_min_u64(a.x, b.x), rm_min_u64(a.y, b.y));
}
RM_INLINE u64x3 rm_min_u64x3(const u64x3 a, const u64x3 b) {
    return rm_u64x3(rm_min_u64(a.x, b.x), rm_min_u64(a.y, b.y),
                    rm_min_u64(a.z, b.z));
}
RM_INLINE u64x4 rm_min_u64x4(const u64x4 a, const u64x4 b) {
    return rm_u64x4(rm_min_u64(a.x, b.x), rm_min_u64(a.y, b.y),
                    rm_min_u64(a.z, b.z), rm_min_u64(a.w, b.w));
}
RM_INLINE u64x2 rm_max_u64x2(const u64x2 a, const u64x2 b) {
    return rm_u64x2(rm_max_u64(a.x, b.x), rm_max_u64(a.y, b.y));
}
RM_INLINE u64x3 rm_max_u64x3(const u64x3 a, const u64x3 b) {
    return rm_u64x3(rm_max_u64(a.x, b.x), rm_max_u64(a.y, b.y),
                    rm_max_u64(a.z, b.z));
}
RM_INLINE u64x4 rm_max_u64x4(const u64x4 a, const u64x4 b) {
    return rm_u64x4(rm_max_u64(a.x, b.x), rm_max_u64(a.y, b.y),
                    rm_max_u64(a.z, b.z), rm_max_u64(a.w, b.w));
}
RM_INLINE u64x2 rm_add_u64x2(const u64x2 a, const u64x2 b) {
    return rm_u64x2(a.x + b.x, a.y + b.y);
}
RM_INLINE u64x3 rm_add_u64x3(const u64x3 a, const u64x3 b) {
    return rm_u64x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE u64x4 rm_add_u64x4(const u64x4 a, const u64x4 b) {
    return rm_u64x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE u64x2 rm_sub_u64x2(const u64x2 a, const u64x2 b) {
    return rm_u64x2(a.x - b.x, a.y - b.y);
}
RM_INLINE u64x3 rm_sub_u64x3(const u64x3 a, const u64x3 b) {
    return rm_u64x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE u64x4 rm_sub_u64x4(const u64x4 a, const u64x4 b) {
    return rm_u64x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE u64x2 rm_mul_u64x2(const u64x2 a, const u64x2 b) {
    return rm_u64x2(a.x * b.x, a.y * b.y);
}
RM_INLINE u64x3 rm_mul_u64x3(const u64x3 a, const u64x3 b) {
    return rm_u64x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE u64x4 rm_mul_u64x4(const u64x4 a, const u64x4 b) {
    return rm_u64x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE u64x2 rm_div_u64x2(const u64x2 a, const u64x2 b) {
    return rm_u64x2(a.x / b.x, a.y / b.y);
}
RM_INLINE u64x3 rm_div_u64x3(const u64x3 a, const u64x3 b) {
    return rm_u64x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE u64x4 rm_div_u64x4(const u64x4 a, const u64x4 b) {
    return rm_u64x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE u64x2 rm_mod_u64x2(const u64x2 a, const u64x2 b) {
    return rm_u64x2(rm_mod_u64(a.x, b.x), rm_mod_u64(a.y, b.y));
}
RM_INLINE u64x3 rm_mod_u64x3(const u64x3 a, const u64x3 b) {
    return rm_u64x3(rm_mod_u64(a.x, b.x), rm_mod_u64(a.y, b.y),
                    rm_mod_u64(a.z, b.z));
}
RM_INLINE u64x4 rm_mod_u64x4(const u64x4 a, const u64x4 b) {
    return rm_u64x4(rm_mod_u64(a.x, b.x), rm_mod_u64(a.y, b.y),
                    rm_mod_u64(a.z, b.z), rm_mod_u64(a.w, b.w));
}
RM_INLINE u64x2 rm_clamp_u64x2(const u64x2 v, const u64x2 min, const u64x2 max) {
    return rm_u64x2(rm_clamp_u64(v.x, min.x, max.x), rm_clamp_u64(v.y, min.y, max.y));
}
RM_INLINE u64x3 rm_clamp_u64x3(const u64x3 v, const u64x3 min, const u64x3 max) {
    return rm_u64x3(rm_clamp_u64(v.x, min.x, max.x), rm_clamp_u64(v.y, min.y, max.y),
                    rm_clamp_u64(v.z, min.z, max.z));
}
RM_INLINE u64x4 rm_clamp_u64x4(const u64x4 v, const u64x4 min, const u64x4 max) {
    return rm_u64x4(rm_clamp_u64(v.x, min.x, max.x), rm_clamp_u64(v.y, min.y, max.y),
                    rm_clamp_u64(v.z, min.z, max.z), rm_clamp_u64(v.w, min.w, max.w));
}
RM_INLINE u64x2 rm_fma_u64x2(const u64x2 a, const u64x2 b, const u64x2 c) {
    return rm_add_u64x2(rm_mul_u64x2(a, b), c);
}
RM_INLINE u64x3 rm_fma_u64x3(const u64x3 a, const u64x3 b, const u64x3 c) {
    return rm_add_u64x3(rm_mul_u64x3(a, b), c);
}
RM_INLINE u64x4 rm_fma_u64x4(const u64x4 a, const u64x4 b, const u64x4 c) {
    return rm_add_u64x4(rm_mul_u64x4(a, b), c);
}
RM_INLINE u64x2 rm_mins_u64x2(const u64x2 v, const u64 s) {
    return rm_min_u64x2(v, rm_u64x2s(s));
}
RM_INLINE u64x3 rm_mins_u64x3(const u64x3 v, const u64 s) {
    return rm_min_u64x3(v, rm_u64x3s(s));
}
RM_INLINE u64x4 rm_mins_u64x4(const u64x4 v, const u64 s) {
    return rm_min_u64x4(v, rm_u64x4s(s));
}
RM_INLINE u64x2 rm_maxs_u64x2(const u64x2 v, const u64 s) {
    return rm_max_u64x2(v, rm_u64x2s(s));
}
RM_INLINE u64x3 rm_maxs_u64x3(const u64x3 v, const u64 s) {
    return rm_max_u64x3(v, rm_u64x3s(s));
}
RM_INLINE u64x4 rm_maxs_u64x4(const u64x4 v, const u64 s) {
    return rm_max_u64x4(v, rm_u64x4s(s));
}
RM_INLINE u64x2 rm_adds_u64x2(const u64x2 v, const u64 s) {
    return rm_add_u64x2(v, rm_u64x2s(s));
}
RM_INLINE u64x3 rm_adds_u64x3(const u64x3 v, const u64 s) {
    return rm_add_u64x3(v, rm_u64x3s(s));
}
RM_INLINE u64x4 rm_adds_u64x4(const u64x4 v, const u64 s) {
    return rm_add_u64x4(v, rm_u64x4s(s));
}
RM_INLINE u64x2 rm_subs_u64x2(const u64x2 v, const u64 s) {
    return rm_sub_u64x2(v, rm_u64x2s(s));
}
RM_INLINE u64x2 rm_ssub_u64x2(const u64 s, const u64x2 v) {
    return rm_sub_u64x2(rm_u64x2s(s), v);
}
RM_INLINE u64x3 rm_subs_u64x3(const u64x3 v, const u64 s) {
    return rm_sub_u64x3(v, rm_u64x3s(s));
}
RM_INLINE u64x3 rm_ssub_u64x3(const u64 s, const u64x3 v) {
    return rm_sub_u64x3(rm_u64x3s(s), v);
}
RM_INLINE u64x4 rm_subs_u64x4(const u64x4 v, const u64 s) {
    return rm_sub_u64x4(v, rm_u64x4s(s));
}
RM_INLINE u64x4 rm_ssub_u64x4(const u64 s, const u64x4 v) {
    return rm_sub_u64x4(rm_u64x4s(s), v);
}
RM_INLINE u64x2 rm_muls_u64x2(const u64x2 v, const u64 s) {
    return rm_mul_u64x2(v, rm_u64x2s(s));
}
RM_INLINE u64x3 rm_muls_u64x3(const u64x3 v, const u64 s) {
    return rm_mul_u64x3(v, rm_u64x3s(s));
}
RM_INLINE u64x4 rm_muls_u64x4(const u64x4 v, const u64 s) {
    return rm_mul_u64x4(v, rm_u64x4s(s));
}
RM_INLINE u64x2 rm_divs_u64x2(const u64x2 v, const u64 s) {
    return rm_div_u64x2(v, rm_u64x2s(s));
}
RM_INLINE u64x2 rm_sdiv_u64x2(const u64 s, const u64x2 v) {
    return rm_div_u64x2(rm_u64x2s(s), v);
}
RM_INLINE u64x3 rm_divs_u64x3(const u64x3 v, const u64 s) {
    return rm_div_u64x3(v, rm_u64x3s(s));
}
RM_INLINE u64x3 rm_sdiv_u64x3(const u64 s, const u64x3 v) {
    return rm_div_u64x3(rm_u64x3s(s), v);
}
RM_INLINE u64x4 rm_divs_u64x4(const u64x4 v, const u64 s) {
    return rm_div_u64x4(v, rm_u64x4s(s));
}
RM_INLINE u64x4 rm_sdiv_u64x4(const u64 s, const u64x4 v) {
    return rm_div_u64x4(rm_u64x4s(s), v);
}
RM_INLINE u64x2 rm_mods_u64x2(const u64x2 v, const u64 s) {
    return rm_mod_u64x2(v, rm_u64x2s(s));
}
RM_INLINE u64x2 rm_smod_u64x2(const u64 s, const u64x2 v) {
    return rm_mod_u64x2(rm_u64x2s(s), v);
}
RM_INLINE u64x3 rm_mods_u64x3(const u64x3 v, const u64 s) {
    return rm_mod_u64x3(v, rm_u64x3s(s));
}
RM_INLINE u64x3 rm_smod_u64x3(const u64 s, const u64x3 v) {
    return rm_mod_u64x3(rm_u64x3s(s), v);
}
RM_INLINE u64x4 rm_mods_u64x4(const u64x4 v, const u64 s) {
    return rm_mod_u64x4(v, rm_u64x4s(s));
}
RM_INLINE u64x4 rm_smod_u64x4(const u64 s, const u64x4 v) {
    return rm_mod_u64x4(rm_u64x4s(s), v);
}
RM_INLINE u64x2 rm_clamps_u64x2(const u64x2 v, u64 min, u64 max) {
    return rm_clamp_u64x2(v, rm_u64x2s(min), rm_u64x2s(max));
}
RM_INLINE u64x2 rm_fmas_u64x2(const u64x2 a, const u64x2 b, const u64 c) {
    return rm_adds_u64x2(rm_mul_u64x2(a, b), c);
}
RM_INLINE u64x2 rm_fmass_u64x2(const u64x2 a, const u64 b, const u64 c) {
    return rm_adds_u64x2(rm_muls_u64x2(a, b), c);
}
RM_INLINE u64x3 rm_clamps_u64x3(const u64x3 v, u64 min, u64 max) {
    return rm_clamp_u64x3(v, rm_u64x3s(min), rm_u64x3s(max));
}
RM_INLINE u64x3 rm_fmas_u64x3(const u64x3 a, const u64x3 b, const u64 c) {
    return rm_adds_u64x3(rm_mul_u64x3(a, b), c);
}
RM_INLINE u64x3 rm_fmass_u64x3(const u64x3 a, const u64 b, const u64 c) {
    return rm_adds_u64x3(rm_muls_u64x3(a, b), c);
}
RM_INLINE u64x4 rm_clamps_u64x4(const u64x4 v, u64 min, u64 max) {
    return rm_clamp_u64x4(v, rm_u64x4s(min), rm_u64x4s(max));
}
RM_INLINE u64x4 rm_fmas_u64x4(const u64x4 a, const u64x4 b, const u64 c) {
    return rm_adds_u64x4(rm_mul_u64x4(a, b), c);
}
RM_INLINE u64x4 rm_fmass_u64x4(const u64x4 a, const u64 b, const u64 c) {
    return rm_adds_u64x4(rm_muls_u64x4(a, b), c);
}
RM_INLINE i8x2 rm_min_i8x2(const i8x2 a, const i8x2 b) {
    return rm_i8x2(rm_min_i8(a.x, b.x), rm_min_i8(a.y, b.y));
}
RM_INLINE i8x3 rm_min_i8x3(const i8x3 a, const i8x3 b) {
    return rm_i8x3(rm_min_i8(a.x, b.x), rm_min_i8(a.y, b.y),
                    rm_min_i8(a.z, b.z));
}
RM_INLINE i8x4 rm_min_i8x4(const i8x4 a, const i8x4 b) {
    return rm_i8x4(rm_min_i8(a.x, b.x), rm_min_i8(a.y, b.y),
                    rm_min_i8(a.z, b.z), rm_min_i8(a.w, b.w));
}
RM_INLINE i8x2 rm_max_i8x2(const i8x2 a, const i8x2 b) {
    return rm_i8x2(rm_max_i8(a.x, b.x), rm_max_i8(a.y, b.y));
}
RM_INLINE i8x3 rm_max_i8x3(const i8x3 a, const i8x3 b) {
    return rm_i8x3(rm_max_i8(a.x, b.x), rm_max_i8(a.y, b.y),
                    rm_max_i8(a.z, b.z));
}
RM_INLINE i8x4 rm_max_i8x4(const i8x4 a, const i8x4 b) {
    return rm_i8x4(rm_max_i8(a.x, b.x), rm_max_i8(a.y, b.y),
                    rm_max_i8(a.z, b.z), rm_max_i8(a.w, b.w));
}
RM_INLINE i8x2 rm_add_i8x2(const i8x2 a, const i8x2 b) {
    return rm_i8x2(a.x + b.x, a.y + b.y);
}
RM_INLINE i8x3 rm_add_i8x3(const i8x3 a, const i8x3 b) {
    return rm_i8x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE i8x4 rm_add_i8x4(const i8x4 a, const i8x4 b) {
    return rm_i8x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE i8x2 rm_sub_i8x2(const i8x2 a, const i8x2 b) {
    return rm_i8x2(a.x - b.x, a.y - b.y);
}
RM_INLINE i8x3 rm_sub_i8x3(const i8x3 a, const i8x3 b) {
    return rm_i8x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE i8x4 rm_sub_i8x4(const i8x4 a, const i8x4 b) {
    return rm_i8x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE i8x2 rm_mul_i8x2(const i8x2 a, const i8x2 b) {
    return rm_i8x2(a.x * b.x, a.y * b.y);
}
RM_INLINE i8x3 rm_mul_i8x3(const i8x3 a, const i8x3 b) {
    return rm_i8x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE i8x4 rm_mul_i8x4(const i8x4 a, const i8x4 b) {
    return rm_i8x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE i8x2 rm_div_i8x2(const i8x2 a, const i8x2 b) {
    return rm_i8x2(a.x / b.x, a.y / b.y);
}
RM_INLINE i8x3 rm_div_i8x3(const i8x3 a, const i8x3 b) {
    return rm_i8x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE i8x4 rm_div_i8x4(const i8x4 a, const i8x4 b) {
    return rm_i8x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE i8x2 rm_mod_i8x2(const i8x2 a, const i8x2 b) {
    return rm_i8x2(rm_mod_i8(a.x, b.x), rm_mod_i8(a.y, b.y));
}
RM_INLINE i8x3 rm_mod_i8x3(const i8x3 a, const i8x3 b) {
    return rm_i8x3(rm_mod_i8(a.x, b.x), rm_mod_i8(a.y, b.y),
                    rm_mod_i8(a.z, b.z));
}
RM_INLINE i8x4 rm_mod_i8x4(const i8x4 a, const i8x4 b) {
    return rm_i8x4(rm_mod_i8(a.x, b.x), rm_mod_i8(a.y, b.y),
                    rm_mod_i8(a.z, b.z), rm_mod_i8(a.w, b.w));
}
RM_INLINE i8x2 rm_clamp_i8x2(const i8x2 v, const i8x2 min, const i8x2 max) {
    return rm_i8x2(rm_clamp_i8(v.x, min.x, max.x), rm_clamp_i8(v.y, min.y, max.y));
}
RM_INLINE i8x3 rm_clamp_i8x3(const i8x3 v, const i8x3 min, const i8x3 max) {
    return rm_i8x3(rm_clamp_i8(v.x, min.x, max.x), rm_clamp_i8(v.y, min.y, max.y),
                    rm_clamp_i8(v.z, min.z, max.z));
}
RM_INLINE i8x4 rm_clamp_i8x4(const i8x4 v, const i8x4 min, const i8x4 max) {
    return rm_i8x4(rm_clamp_i8(v.x, min.x, max.x), rm_clamp_i8(v.y, min.y, max.y),
                    rm_clamp_i8(v.z, min.z, max.z), rm_clamp_i8(v.w, min.w, max.w));
}
RM_INLINE i8x2 rm_sign_i8x2(const i8x2 v) {
    return rm_i8x2(rm_sign_i8(v.x), rm_sign_i8(v.y));
}
RM_INLINE i8x3 rm_sign_i8x3(const i8x3 v) {
    return rm_i8x3(rm_sign_i8(v.x), rm_sign_i8(v.y),
                    rm_sign_i8(v.z));
}
RM_INLINE i8x4 rm_sign_i8x4(const i8x4 v) {
    return rm_i8x4(rm_sign_i8(v.x), rm_sign_i8(v.y),
                    rm_sign_i8(v.z), rm_sign_i8(v.w));
}
RM_INLINE i8x2 rm_copysign_i8x2(const i8x2 v, const i8x2 s) {
    return rm_i8x2(rm_copysign_i8(v.x, s.x), rm_copysign_i8(v.y, s.y));
}
RM_INLINE i8x3 rm_copysign_i8x3(const i8x3 v, const i8x3 s) {
    return rm_i8x3(rm_copysign_i8(v.x, s.x), rm_copysign_i8(v.y, s.y),
                    rm_copysign_i8(v.z, s.z));
}
RM_INLINE i8x4 rm_copysign_i8x4(const i8x4 v, const i8x4 s) {
    return rm_i8x4(rm_copysign_i8(v.x, s.x), rm_copysign_i8(v.y, s.y),
                    rm_copysign_i8(v.z, s.z), rm_copysign_i8(v.w, s.w));
}
RM_INLINE i8x2 rm_fma_i8x2(const i8x2 a, const i8x2 b, const i8x2 c) {
    return rm_add_i8x2(rm_mul_i8x2(a, b), c);
}
RM_INLINE i8x3 rm_fma_i8x3(const i8x3 a, const i8x3 b, const i8x3 c) {
    return rm_add_i8x3(rm_mul_i8x3(a, b), c);
}
RM_INLINE i8x4 rm_fma_i8x4(const i8x4 a, const i8x4 b, const i8x4 c) {
    return rm_add_i8x4(rm_mul_i8x4(a, b), c);
}
RM_INLINE i8x2 rm_mins_i8x2(const i8x2 v, const i8 s) {
    return rm_min_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x3 rm_mins_i8x3(const i8x3 v, const i8 s) {
    return rm_min_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x4 rm_mins_i8x4(const i8x4 v, const i8 s) {
    return rm_min_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x2 rm_maxs_i8x2(const i8x2 v, const i8 s) {
    return rm_max_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x3 rm_maxs_i8x3(const i8x3 v, const i8 s) {
    return rm_max_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x4 rm_maxs_i8x4(const i8x4 v, const i8 s) {
    return rm_max_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x2 rm_adds_i8x2(const i8x2 v, const i8 s) {
    return rm_add_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x3 rm_adds_i8x3(const i8x3 v, const i8 s) {
    return rm_add_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x4 rm_adds_i8x4(const i8x4 v, const i8 s) {
    return rm_add_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x2 rm_subs_i8x2(const i8x2 v, const i8 s) {
    return rm_sub_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x2 rm_ssub_i8x2(const i8 s, const i8x2 v) {
    return rm_sub_i8x2(rm_i8x2s(s), v);
}
RM_INLINE i8x3 rm_subs_i8x3(const i8x3 v, const i8 s) {
    return rm_sub_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x3 rm_ssub_i8x3(const i8 s, const i8x3 v) {
    return rm_sub_i8x3(rm_i8x3s(s), v);
}
RM_INLINE i8x4 rm_subs_i8x4(const i8x4 v, const i8 s) {
    return rm_sub_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x4 rm_ssub_i8x4(const i8 s, const i8x4 v) {
    return rm_sub_i8x4(rm_i8x4s(s), v);
}
RM_INLINE i8x2 rm_muls_i8x2(const i8x2 v, const i8 s) {
    return rm_mul_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x3 rm_muls_i8x3(const i8x3 v, const i8 s) {
    return rm_mul_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x4 rm_muls_i8x4(const i8x4 v, const i8 s) {
    return rm_mul_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x2 rm_divs_i8x2(const i8x2 v, const i8 s) {
    return rm_div_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x2 rm_sdiv_i8x2(const i8 s, const i8x2 v) {
    return rm_div_i8x2(rm_i8x2s(s), v);
}
RM_INLINE i8x3 rm_divs_i8x3(const i8x3 v, const i8 s) {
    return rm_div_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x3 rm_sdiv_i8x3(const i8 s, const i8x3 v) {
    return rm_div_i8x3(rm_i8x3s(s), v);
}
RM_INLINE i8x4 rm_divs_i8x4(const i8x4 v, const i8 s) {
    return rm_div_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x4 rm_sdiv_i8x4(const i8 s, const i8x4 v) {
    return rm_div_i8x4(rm_i8x4s(s), v);
}
RM_INLINE i8x2 rm_mods_i8x2(const i8x2 v, const i8 s) {
    return rm_mod_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x2 rm_smod_i8x2(const i8 s, const i8x2 v) {
    return rm_mod_i8x2(rm_i8x2s(s), v);
}
RM_INLINE i8x3 rm_mods_i8x3(const i8x3 v, const i8 s) {
    return rm_mod_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x3 rm_smod_i8x3(const i8 s, const i8x3 v) {
    return rm_mod_i8x3(rm_i8x3s(s), v);
}
RM_INLINE i8x4 rm_mods_i8x4(const i8x4 v, const i8 s) {
    return rm_mod_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x4 rm_smod_i8x4(const i8 s, const i8x4 v) {
    return rm_mod_i8x4(rm_i8x4s(s), v);
}
RM_INLINE i8x2 rm_clamps_i8x2(const i8x2 v, i8 min, i8 max) {
    return rm_clamp_i8x2(v, rm_i8x2s(min), rm_i8x2s(max));
}
RM_INLINE i8x2 rm_copysigns_i8x2(const i8x2 v, const i8 s) {
    return rm_copysign_i8x2(v, rm_i8x2s(s));
}
RM_INLINE i8x2 rm_fmas_i8x2(const i8x2 a, const i8x2 b, const i8 c) {
    return rm_adds_i8x2(rm_mul_i8x2(a, b), c);
}
RM_INLINE i8x2 rm_fmass_i8x2(const i8x2 a, const i8 b, const i8 c) {
    return rm_adds_i8x2(rm_muls_i8x2(a, b), c);
}
RM_INLINE i8x3 rm_clamps_i8x3(const i8x3 v, i8 min, i8 max) {
    return rm_clamp_i8x3(v, rm_i8x3s(min), rm_i8x3s(max));
}
RM_INLINE i8x3 rm_copysigns_i8x3(const i8x3 v, const i8 s) {
    return rm_copysign_i8x3(v, rm_i8x3s(s));
}
RM_INLINE i8x3 rm_fmas_i8x3(const i8x3 a, const i8x3 b, const i8 c) {
    return rm_adds_i8x3(rm_mul_i8x3(a, b), c);
}
RM_INLINE i8x3 rm_fmass_i8x3(const i8x3 a, const i8 b, const i8 c) {
    return rm_adds_i8x3(rm_muls_i8x3(a, b), c);
}
RM_INLINE i8x4 rm_clamps_i8x4(const i8x4 v, i8 min, i8 max) {
    return rm_clamp_i8x4(v, rm_i8x4s(min), rm_i8x4s(max));
}
RM_INLINE i8x4 rm_copysigns_i8x4(const i8x4 v, const i8 s) {
    return rm_copysign_i8x4(v, rm_i8x4s(s));
}
RM_INLINE i8x4 rm_fmas_i8x4(const i8x4 a, const i8x4 b, const i8 c) {
    return rm_adds_i8x4(rm_mul_i8x4(a, b), c);
}
RM_INLINE i8x4 rm_fmass_i8x4(const i8x4 a, const i8 b, const i8 c) {
    return rm_adds_i8x4(rm_muls_i8x4(a, b), c);
}
RM_INLINE i16x2 rm_min_i16x2(const i16x2 a, const i16x2 b) {
    return rm_i16x2(rm_min_i16(a.x, b.x), rm_min_i16(a.y, b.y));
}
RM_INLINE i16x3 rm_min_i16x3(const i16x3 a, const i16x3 b) {
    return rm_i16x3(rm_min_i16(a.x, b.x), rm_min_i16(a.y, b.y),
                    rm_min_i16(a.z, b.z));
}
RM_INLINE i16x4 rm_min_i16x4(const i16x4 a, const i16x4 b) {
    return rm_i16x4(rm_min_i16(a.x, b.x), rm_min_i16(a.y, b.y),
                    rm_min_i16(a.z, b.z), rm_min_i16(a.w, b.w));
}
RM_INLINE i16x2 rm_max_i16x2(const i16x2 a, const i16x2 b) {
    return rm_i16x2(rm_max_i16(a.x, b.x), rm_max_i16(a.y, b.y));
}
RM_INLINE i16x3 rm_max_i16x3(const i16x3 a, const i16x3 b) {
    return rm_i16x3(rm_max_i16(a.x, b.x), rm_max_i16(a.y, b.y),
                    rm_max_i16(a.z, b.z));
}
RM_INLINE i16x4 rm_max_i16x4(const i16x4 a, const i16x4 b) {
    return rm_i16x4(rm_max_i16(a.x, b.x), rm_max_i16(a.y, b.y),
                    rm_max_i16(a.z, b.z), rm_max_i16(a.w, b.w));
}
RM_INLINE i16x2 rm_add_i16x2(const i16x2 a, const i16x2 b) {
    return rm_i16x2(a.x + b.x, a.y + b.y);
}
RM_INLINE i16x3 rm_add_i16x3(const i16x3 a, const i16x3 b) {
    return rm_i16x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE i16x4 rm_add_i16x4(const i16x4 a, const i16x4 b) {
    return rm_i16x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE i16x2 rm_sub_i16x2(const i16x2 a, const i16x2 b) {
    return rm_i16x2(a.x - b.x, a.y - b.y);
}
RM_INLINE i16x3 rm_sub_i16x3(const i16x3 a, const i16x3 b) {
    return rm_i16x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE i16x4 rm_sub_i16x4(const i16x4 a, const i16x4 b) {
    return rm_i16x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE i16x2 rm_mul_i16x2(const i16x2 a, const i16x2 b) {
    return rm_i16x2(a.x * b.x, a.y * b.y);
}
RM_INLINE i16x3 rm_mul_i16x3(const i16x3 a, const i16x3 b) {
    return rm_i16x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE i16x4 rm_mul_i16x4(const i16x4 a, const i16x4 b) {
    return rm_i16x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE i16x2 rm_div_i16x2(const i16x2 a, const i16x2 b) {
    return rm_i16x2(a.x / b.x, a.y / b.y);
}
RM_INLINE i16x3 rm_div_i16x3(const i16x3 a, const i16x3 b) {
    return rm_i16x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE i16x4 rm_div_i16x4(const i16x4 a, const i16x4 b) {
    return rm_i16x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE i16x2 rm_mod_i16x2(const i16x2 a, const i16x2 b) {
    return rm_i16x2(rm_mod_i16(a.x, b.x), rm_mod_i16(a.y, b.y));
}
RM_INLINE i16x3 rm_mod_i16x3(const i16x3 a, const i16x3 b) {
    return rm_i16x3(rm_mod_i16(a.x, b.x), rm_mod_i16(a.y, b.y),
                    rm_mod_i16(a.z, b.z));
}
RM_INLINE i16x4 rm_mod_i16x4(const i16x4 a, const i16x4 b) {
    return rm_i16x4(rm_mod_i16(a.x, b.x), rm_mod_i16(a.y, b.y),
                    rm_mod_i16(a.z, b.z), rm_mod_i16(a.w, b.w));
}
RM_INLINE i16x2 rm_clamp_i16x2(const i16x2 v, const i16x2 min, const i16x2 max) {
    return rm_i16x2(rm_clamp_i16(v.x, min.x, max.x), rm_clamp_i16(v.y, min.y, max.y));
}
RM_INLINE i16x3 rm_clamp_i16x3(const i16x3 v, const i16x3 min, const i16x3 max) {
    return rm_i16x3(rm_clamp_i16(v.x, min.x, max.x), rm_clamp_i16(v.y, min.y, max.y),
                    rm_clamp_i16(v.z, min.z, max.z));
}
RM_INLINE i16x4 rm_clamp_i16x4(const i16x4 v, const i16x4 min, const i16x4 max) {
    return rm_i16x4(rm_clamp_i16(v.x, min.x, max.x), rm_clamp_i16(v.y, min.y, max.y),
                    rm_clamp_i16(v.z, min.z, max.z), rm_clamp_i16(v.w, min.w, max.w));
}
RM_INLINE i16x2 rm_sign_i16x2(const i16x2 v) {
    return rm_i16x2(rm_sign_i16(v.x), rm_sign_i16(v.y));
}
RM_INLINE i16x3 rm_sign_i16x3(const i16x3 v) {
    return rm_i16x3(rm_sign_i16(v.x), rm_sign_i16(v.y),
                    rm_sign_i16(v.z));
}
RM_INLINE i16x4 rm_sign_i16x4(const i16x4 v) {
    return rm_i16x4(rm_sign_i16(v.x), rm_sign_i16(v.y),
                    rm_sign_i16(v.z), rm_sign_i16(v.w));
}
RM_INLINE i16x2 rm_copysign_i16x2(const i16x2 v, const i16x2 s) {
    return rm_i16x2(rm_copysign_i16(v.x, s.x), rm_copysign_i16(v.y, s.y));
}
RM_INLINE i16x3 rm_copysign_i16x3(const i16x3 v, const i16x3 s) {
    return rm_i16x3(rm_copysign_i16(v.x, s.x), rm_copysign_i16(v.y, s.y),
                    rm_copysign_i16(v.z, s.z));
}
RM_INLINE i16x4 rm_copysign_i16x4(const i16x4 v, const i16x4 s) {
    return rm_i16x4(rm_copysign_i16(v.x, s.x), rm_copysign_i16(v.y, s.y),
                    rm_copysign_i16(v.z, s.z), rm_copysign_i16(v.w, s.w));
}
RM_INLINE i16x2 rm_fma_i16x2(const i16x2 a, const i16x2 b, const i16x2 c) {
    return rm_add_i16x2(rm_mul_i16x2(a, b), c);
}
RM_INLINE i16x3 rm_fma_i16x3(const i16x3 a, const i16x3 b, const i16x3 c) {
    return rm_add_i16x3(rm_mul_i16x3(a, b), c);
}
RM_INLINE i16x4 rm_fma_i16x4(const i16x4 a, const i16x4 b, const i16x4 c) {
    return rm_add_i16x4(rm_mul_i16x4(a, b), c);
}
RM_INLINE i16x2 rm_mins_i16x2(const i16x2 v, const i16 s) {
    return rm_min_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x3 rm_mins_i16x3(const i16x3 v, const i16 s) {
    return rm_min_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x4 rm_mins_i16x4(const i16x4 v, const i16 s) {
    return rm_min_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x2 rm_maxs_i16x2(const i16x2 v, const i16 s) {
    return rm_max_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x3 rm_maxs_i16x3(const i16x3 v, const i16 s) {
    return rm_max_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x4 rm_maxs_i16x4(const i16x4 v, const i16 s) {
    return rm_max_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x2 rm_adds_i16x2(const i16x2 v, const i16 s) {
    return rm_add_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x3 rm_adds_i16x3(const i16x3 v, const i16 s) {
    return rm_add_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x4 rm_adds_i16x4(const i16x4 v, const i16 s) {
    return rm_add_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x2 rm_subs_i16x2(const i16x2 v, const i16 s) {
    return rm_sub_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x2 rm_ssub_i16x2(const i16 s, const i16x2 v) {
    return rm_sub_i16x2(rm_i16x2s(s), v);
}
RM_INLINE i16x3 rm_subs_i16x3(const i16x3 v, const i16 s) {
    return rm_sub_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x3 rm_ssub_i16x3(const i16 s, const i16x3 v) {
    return rm_sub_i16x3(rm_i16x3s(s), v);
}
RM_INLINE i16x4 rm_subs_i16x4(const i16x4 v, const i16 s) {
    return rm_sub_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x4 rm_ssub_i16x4(const i16 s, const i16x4 v) {
    return rm_sub_i16x4(rm_i16x4s(s), v);
}
RM_INLINE i16x2 rm_muls_i16x2(const i16x2 v, const i16 s) {
    return rm_mul_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x3 rm_muls_i16x3(const i16x3 v, const i16 s) {
    return rm_mul_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x4 rm_muls_i16x4(const i16x4 v, const i16 s) {
    return rm_mul_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x2 rm_divs_i16x2(const i16x2 v, const i16 s) {
    return rm_div_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x2 rm_sdiv_i16x2(const i16 s, const i16x2 v) {
    return rm_div_i16x2(rm_i16x2s(s), v);
}
RM_INLINE i16x3 rm_divs_i16x3(const i16x3 v, const i16 s) {
    return rm_div_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x3 rm_sdiv_i16x3(const i16 s, const i16x3 v) {
    return rm_div_i16x3(rm_i16x3s(s), v);
}
RM_INLINE i16x4 rm_divs_i16x4(const i16x4 v, const i16 s) {
    return rm_div_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x4 rm_sdiv_i16x4(const i16 s, const i16x4 v) {
    return rm_div_i16x4(rm_i16x4s(s), v);
}
RM_INLINE i16x2 rm_mods_i16x2(const i16x2 v, const i16 s) {
    return rm_mod_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x2 rm_smod_i16x2(const i16 s, const i16x2 v) {
    return rm_mod_i16x2(rm_i16x2s(s), v);
}
RM_INLINE i16x3 rm_mods_i16x3(const i16x3 v, const i16 s) {
    return rm_mod_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x3 rm_smod_i16x3(const i16 s, const i16x3 v) {
    return rm_mod_i16x3(rm_i16x3s(s), v);
}
RM_INLINE i16x4 rm_mods_i16x4(const i16x4 v, const i16 s) {
    return rm_mod_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x4 rm_smod_i16x4(const i16 s, const i16x4 v) {
    return rm_mod_i16x4(rm_i16x4s(s), v);
}
RM_INLINE i16x2 rm_clamps_i16x2(const i16x2 v, i16 min, i16 max) {
    return rm_clamp_i16x2(v, rm_i16x2s(min), rm_i16x2s(max));
}
RM_INLINE i16x2 rm_copysigns_i16x2(const i16x2 v, const i16 s) {
    return rm_copysign_i16x2(v, rm_i16x2s(s));
}
RM_INLINE i16x2 rm_fmas_i16x2(const i16x2 a, const i16x2 b, const i16 c) {
    return rm_adds_i16x2(rm_mul_i16x2(a, b), c);
}
RM_INLINE i16x2 rm_fmass_i16x2(const i16x2 a, const i16 b, const i16 c) {
    return rm_adds_i16x2(rm_muls_i16x2(a, b), c);
}
RM_INLINE i16x3 rm_clamps_i16x3(const i16x3 v, i16 min, i16 max) {
    return rm_clamp_i16x3(v, rm_i16x3s(min), rm_i16x3s(max));
}
RM_INLINE i16x3 rm_copysigns_i16x3(const i16x3 v, const i16 s) {
    return rm_copysign_i16x3(v, rm_i16x3s(s));
}
RM_INLINE i16x3 rm_fmas_i16x3(const i16x3 a, const i16x3 b, const i16 c) {
    return rm_adds_i16x3(rm_mul_i16x3(a, b), c);
}
RM_INLINE i16x3 rm_fmass_i16x3(const i16x3 a, const i16 b, const i16 c) {
    return rm_adds_i16x3(rm_muls_i16x3(a, b), c);
}
RM_INLINE i16x4 rm_clamps_i16x4(const i16x4 v, i16 min, i16 max) {
    return rm_clamp_i16x4(v, rm_i16x4s(min), rm_i16x4s(max));
}
RM_INLINE i16x4 rm_copysigns_i16x4(const i16x4 v, const i16 s) {
    return rm_copysign_i16x4(v, rm_i16x4s(s));
}
RM_INLINE i16x4 rm_fmas_i16x4(const i16x4 a, const i16x4 b, const i16 c) {
    return rm_adds_i16x4(rm_mul_i16x4(a, b), c);
}
RM_INLINE i16x4 rm_fmass_i16x4(const i16x4 a, const i16 b, const i16 c) {
    return rm_adds_i16x4(rm_muls_i16x4(a, b), c);
}
RM_INLINE i32x2 rm_min_i32x2(const i32x2 a, const i32x2 b) {
    return rm_i32x2(rm_min_i32(a.x, b.x), rm_min_i32(a.y, b.y));
}
RM_INLINE i32x3 rm_min_i32x3(const i32x3 a, const i32x3 b) {
    return rm_i32x3(rm_min_i32(a.x, b.x), rm_min_i32(a.y, b.y),
                    rm_min_i32(a.z, b.z));
}
RM_INLINE i32x4 rm_min_i32x4(const i32x4 a, const i32x4 b) {
    return rm_i32x4(rm_min_i32(a.x, b.x), rm_min_i32(a.y, b.y),
                    rm_min_i32(a.z, b.z), rm_min_i32(a.w, b.w));
}
RM_INLINE i32x2 rm_max_i32x2(const i32x2 a, const i32x2 b) {
    return rm_i32x2(rm_max_i32(a.x, b.x), rm_max_i32(a.y, b.y));
}
RM_INLINE i32x3 rm_max_i32x3(const i32x3 a, const i32x3 b) {
    return rm_i32x3(rm_max_i32(a.x, b.x), rm_max_i32(a.y, b.y),
                    rm_max_i32(a.z, b.z));
}
RM_INLINE i32x4 rm_max_i32x4(const i32x4 a, const i32x4 b) {
    return rm_i32x4(rm_max_i32(a.x, b.x), rm_max_i32(a.y, b.y),
                    rm_max_i32(a.z, b.z), rm_max_i32(a.w, b.w));
}
RM_INLINE i32x2 rm_add_i32x2(const i32x2 a, const i32x2 b) {
    return rm_i32x2(a.x + b.x, a.y + b.y);
}
RM_INLINE i32x3 rm_add_i32x3(const i32x3 a, const i32x3 b) {
    return rm_i32x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE i32x4 rm_add_i32x4(const i32x4 a, const i32x4 b) {
    return rm_i32x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE i32x2 rm_sub_i32x2(const i32x2 a, const i32x2 b) {
    return rm_i32x2(a.x - b.x, a.y - b.y);
}
RM_INLINE i32x3 rm_sub_i32x3(const i32x3 a, const i32x3 b) {
    return rm_i32x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE i32x4 rm_sub_i32x4(const i32x4 a, const i32x4 b) {
    return rm_i32x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE i32x2 rm_mul_i32x2(const i32x2 a, const i32x2 b) {
    return rm_i32x2(a.x * b.x, a.y * b.y);
}
RM_INLINE i32x3 rm_mul_i32x3(const i32x3 a, const i32x3 b) {
    return rm_i32x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE i32x4 rm_mul_i32x4(const i32x4 a, const i32x4 b) {
    return rm_i32x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE i32x2 rm_div_i32x2(const i32x2 a, const i32x2 b) {
    return rm_i32x2(a.x / b.x, a.y / b.y);
}
RM_INLINE i32x3 rm_div_i32x3(const i32x3 a, const i32x3 b) {
    return rm_i32x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE i32x4 rm_div_i32x4(const i32x4 a, const i32x4 b) {
    return rm_i32x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE i32x2 rm_mod_i32x2(const i32x2 a, const i32x2 b) {
    return rm_i32x2(rm_mod_i32(a.x, b.x), rm_mod_i32(a.y, b.y));
}
RM_INLINE i32x3 rm_mod_i32x3(const i32x3 a, const i32x3 b) {
    return rm_i32x3(rm_mod_i32(a.x, b.x), rm_mod_i32(a.y, b.y),
                    rm_mod_i32(a.z, b.z));
}
RM_INLINE i32x4 rm_mod_i32x4(const i32x4 a, const i32x4 b) {
    return rm_i32x4(rm_mod_i32(a.x, b.x), rm_mod_i32(a.y, b.y),
                    rm_mod_i32(a.z, b.z), rm_mod_i32(a.w, b.w));
}
RM_INLINE i32x2 rm_clamp_i32x2(const i32x2 v, const i32x2 min, const i32x2 max) {
    return rm_i32x2(rm_clamp_i32(v.x, min.x, max.x), rm_clamp_i32(v.y, min.y, max.y));
}
RM_INLINE i32x3 rm_clamp_i32x3(const i32x3 v, const i32x3 min, const i32x3 max) {
    return rm_i32x3(rm_clamp_i32(v.x, min.x, max.x), rm_clamp_i32(v.y, min.y, max.y),
                    rm_clamp_i32(v.z, min.z, max.z));
}
RM_INLINE i32x4 rm_clamp_i32x4(const i32x4 v, const i32x4 min, const i32x4 max) {
    return rm_i32x4(rm_clamp_i32(v.x, min.x, max.x), rm_clamp_i32(v.y, min.y, max.y),
                    rm_clamp_i32(v.z, min.z, max.z), rm_clamp_i32(v.w, min.w, max.w));
}
RM_INLINE i32x2 rm_sign_i32x2(const i32x2 v) {
    return rm_i32x2(rm_sign_i32(v.x), rm_sign_i32(v.y));
}
RM_INLINE i32x3 rm_sign_i32x3(const i32x3 v) {
    return rm_i32x3(rm_sign_i32(v.x), rm_sign_i32(v.y),
                    rm_sign_i32(v.z));
}
RM_INLINE i32x4 rm_sign_i32x4(const i32x4 v) {
    return rm_i32x4(rm_sign_i32(v.x), rm_sign_i32(v.y),
                    rm_sign_i32(v.z), rm_sign_i32(v.w));
}
RM_INLINE i32x2 rm_copysign_i32x2(const i32x2 v, const i32x2 s) {
    return rm_i32x2(rm_copysign_i32(v.x, s.x), rm_copysign_i32(v.y, s.y));
}
RM_INLINE i32x3 rm_copysign_i32x3(const i32x3 v, const i32x3 s) {
    return rm_i32x3(rm_copysign_i32(v.x, s.x), rm_copysign_i32(v.y, s.y),
                    rm_copysign_i32(v.z, s.z));
}
RM_INLINE i32x4 rm_copysign_i32x4(const i32x4 v, const i32x4 s) {
    return rm_i32x4(rm_copysign_i32(v.x, s.x), rm_copysign_i32(v.y, s.y),
                    rm_copysign_i32(v.z, s.z), rm_copysign_i32(v.w, s.w));
}
RM_INLINE i32x2 rm_fma_i32x2(const i32x2 a, const i32x2 b, const i32x2 c) {
    return rm_add_i32x2(rm_mul_i32x2(a, b), c);
}
RM_INLINE i32x3 rm_fma_i32x3(const i32x3 a, const i32x3 b, const i32x3 c) {
    return rm_add_i32x3(rm_mul_i32x3(a, b), c);
}
RM_INLINE i32x4 rm_fma_i32x4(const i32x4 a, const i32x4 b, const i32x4 c) {
    return rm_add_i32x4(rm_mul_i32x4(a, b), c);
}
RM_INLINE i32x2 rm_mins_i32x2(const i32x2 v, const i32 s) {
    return rm_min_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x3 rm_mins_i32x3(const i32x3 v, const i32 s) {
    return rm_min_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x4 rm_mins_i32x4(const i32x4 v, const i32 s) {
    return rm_min_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x2 rm_maxs_i32x2(const i32x2 v, const i32 s) {
    return rm_max_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x3 rm_maxs_i32x3(const i32x3 v, const i32 s) {
    return rm_max_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x4 rm_maxs_i32x4(const i32x4 v, const i32 s) {
    return rm_max_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x2 rm_adds_i32x2(const i32x2 v, const i32 s) {
    return rm_add_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x3 rm_adds_i32x3(const i32x3 v, const i32 s) {
    return rm_add_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x4 rm_adds_i32x4(const i32x4 v, const i32 s) {
    return rm_add_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x2 rm_subs_i32x2(const i32x2 v, const i32 s) {
    return rm_sub_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x2 rm_ssub_i32x2(const i32 s, const i32x2 v) {
    return rm_sub_i32x2(rm_i32x2s(s), v);
}
RM_INLINE i32x3 rm_subs_i32x3(const i32x3 v, const i32 s) {
    return rm_sub_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x3 rm_ssub_i32x3(const i32 s, const i32x3 v) {
    return rm_sub_i32x3(rm_i32x3s(s), v);
}
RM_INLINE i32x4 rm_subs_i32x4(const i32x4 v, const i32 s) {
    return rm_sub_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x4 rm_ssub_i32x4(const i32 s, const i32x4 v) {
    return rm_sub_i32x4(rm_i32x4s(s), v);
}
RM_INLINE i32x2 rm_muls_i32x2(const i32x2 v, const i32 s) {
    return rm_mul_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x3 rm_muls_i32x3(const i32x3 v, const i32 s) {
    return rm_mul_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x4 rm_muls_i32x4(const i32x4 v, const i32 s) {
    return rm_mul_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x2 rm_divs_i32x2(const i32x2 v, const i32 s) {
    return rm_div_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x2 rm_sdiv_i32x2(const i32 s, const i32x2 v) {
    return rm_div_i32x2(rm_i32x2s(s), v);
}
RM_INLINE i32x3 rm_divs_i32x3(const i32x3 v, const i32 s) {
    return rm_div_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x3 rm_sdiv_i32x3(const i32 s, const i32x3 v) {
    return rm_div_i32x3(rm_i32x3s(s), v);
}
RM_INLINE i32x4 rm_divs_i32x4(const i32x4 v, const i32 s) {
    return rm_div_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x4 rm_sdiv_i32x4(const i32 s, const i32x4 v) {
    return rm_div_i32x4(rm_i32x4s(s), v);
}
RM_INLINE i32x2 rm_mods_i32x2(const i32x2 v, const i32 s) {
    return rm_mod_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x2 rm_smod_i32x2(const i32 s, const i32x2 v) {
    return rm_mod_i32x2(rm_i32x2s(s), v);
}
RM_INLINE i32x3 rm_mods_i32x3(const i32x3 v, const i32 s) {
    return rm_mod_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x3 rm_smod_i32x3(const i32 s, const i32x3 v) {
    return rm_mod_i32x3(rm_i32x3s(s), v);
}
RM_INLINE i32x4 rm_mods_i32x4(const i32x4 v, const i32 s) {
    return rm_mod_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x4 rm_smod_i32x4(const i32 s, const i32x4 v) {
    return rm_mod_i32x4(rm_i32x4s(s), v);
}
RM_INLINE i32x2 rm_clamps_i32x2(const i32x2 v, i32 min, i32 max) {
    return rm_clamp_i32x2(v, rm_i32x2s(min), rm_i32x2s(max));
}
RM_INLINE i32x2 rm_copysigns_i32x2(const i32x2 v, const i32 s) {
    return rm_copysign_i32x2(v, rm_i32x2s(s));
}
RM_INLINE i32x2 rm_fmas_i32x2(const i32x2 a, const i32x2 b, const i32 c) {
    return rm_adds_i32x2(rm_mul_i32x2(a, b), c);
}
RM_INLINE i32x2 rm_fmass_i32x2(const i32x2 a, const i32 b, const i32 c) {
    return rm_adds_i32x2(rm_muls_i32x2(a, b), c);
}
RM_INLINE i32x3 rm_clamps_i32x3(const i32x3 v, i32 min, i32 max) {
    return rm_clamp_i32x3(v, rm_i32x3s(min), rm_i32x3s(max));
}
RM_INLINE i32x3 rm_copysigns_i32x3(const i32x3 v, const i32 s) {
    return rm_copysign_i32x3(v, rm_i32x3s(s));
}
RM_INLINE i32x3 rm_fmas_i32x3(const i32x3 a, const i32x3 b, const i32 c) {
    return rm_adds_i32x3(rm_mul_i32x3(a, b), c);
}
RM_INLINE i32x3 rm_fmass_i32x3(const i32x3 a, const i32 b, const i32 c) {
    return rm_adds_i32x3(rm_muls_i32x3(a, b), c);
}
RM_INLINE i32x4 rm_clamps_i32x4(const i32x4 v, i32 min, i32 max) {
    return rm_clamp_i32x4(v, rm_i32x4s(min), rm_i32x4s(max));
}
RM_INLINE i32x4 rm_copysigns_i32x4(const i32x4 v, const i32 s) {
    return rm_copysign_i32x4(v, rm_i32x4s(s));
}
RM_INLINE i32x4 rm_fmas_i32x4(const i32x4 a, const i32x4 b, const i32 c) {
    return rm_adds_i32x4(rm_mul_i32x4(a, b), c);
}
RM_INLINE i32x4 rm_fmass_i32x4(const i32x4 a, const i32 b, const i32 c) {
    return rm_adds_i32x4(rm_muls_i32x4(a, b), c);
}
RM_INLINE i64x2 rm_min_i64x2(const i64x2 a, const i64x2 b) {
    return rm_i64x2(rm_min_i64(a.x, b.x), rm_min_i64(a.y, b.y));
}
RM_INLINE i64x3 rm_min_i64x3(const i64x3 a, const i64x3 b) {
    return rm_i64x3(rm_min_i64(a.x, b.x), rm_min_i64(a.y, b.y),
                    rm_min_i64(a.z, b.z));
}
RM_INLINE i64x4 rm_min_i64x4(const i64x4 a, const i64x4 b) {
    return rm_i64x4(rm_min_i64(a.x, b.x), rm_min_i64(a.y, b.y),
                    rm_min_i64(a.z, b.z), rm_min_i64(a.w, b.w));
}
RM_INLINE i64x2 rm_max_i64x2(const i64x2 a, const i64x2 b) {
    return rm_i64x2(rm_max_i64(a.x, b.x), rm_max_i64(a.y, b.y));
}
RM_INLINE i64x3 rm_max_i64x3(const i64x3 a, const i64x3 b) {
    return rm_i64x3(rm_max_i64(a.x, b.x), rm_max_i64(a.y, b.y),
                    rm_max_i64(a.z, b.z));
}
RM_INLINE i64x4 rm_max_i64x4(const i64x4 a, const i64x4 b) {
    return rm_i64x4(rm_max_i64(a.x, b.x), rm_max_i64(a.y, b.y),
                    rm_max_i64(a.z, b.z), rm_max_i64(a.w, b.w));
}
RM_INLINE i64x2 rm_add_i64x2(const i64x2 a, const i64x2 b) {
    return rm_i64x2(a.x + b.x, a.y + b.y);
}
RM_INLINE i64x3 rm_add_i64x3(const i64x3 a, const i64x3 b) {
    return rm_i64x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE i64x4 rm_add_i64x4(const i64x4 a, const i64x4 b) {
    return rm_i64x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE i64x2 rm_sub_i64x2(const i64x2 a, const i64x2 b) {
    return rm_i64x2(a.x - b.x, a.y - b.y);
}
RM_INLINE i64x3 rm_sub_i64x3(const i64x3 a, const i64x3 b) {
    return rm_i64x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE i64x4 rm_sub_i64x4(const i64x4 a, const i64x4 b) {
    return rm_i64x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE i64x2 rm_mul_i64x2(const i64x2 a, const i64x2 b) {
    return rm_i64x2(a.x * b.x, a.y * b.y);
}
RM_INLINE i64x3 rm_mul_i64x3(const i64x3 a, const i64x3 b) {
    return rm_i64x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE i64x4 rm_mul_i64x4(const i64x4 a, const i64x4 b) {
    return rm_i64x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE i64x2 rm_div_i64x2(const i64x2 a, const i64x2 b) {
    return rm_i64x2(a.x / b.x, a.y / b.y);
}
RM_INLINE i64x3 rm_div_i64x3(const i64x3 a, const i64x3 b) {
    return rm_i64x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE i64x4 rm_div_i64x4(const i64x4 a, const i64x4 b) {
    return rm_i64x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE i64x2 rm_mod_i64x2(const i64x2 a, const i64x2 b) {
    return rm_i64x2(rm_mod_i64(a.x, b.x), rm_mod_i64(a.y, b.y));
}
RM_INLINE i64x3 rm_mod_i64x3(const i64x3 a, const i64x3 b) {
    return rm_i64x3(rm_mod_i64(a.x, b.x), rm_mod_i64(a.y, b.y),
                    rm_mod_i64(a.z, b.z));
}
RM_INLINE i64x4 rm_mod_i64x4(const i64x4 a, const i64x4 b) {
    return rm_i64x4(rm_mod_i64(a.x, b.x), rm_mod_i64(a.y, b.y),
                    rm_mod_i64(a.z, b.z), rm_mod_i64(a.w, b.w));
}
RM_INLINE i64x2 rm_clamp_i64x2(const i64x2 v, const i64x2 min, const i64x2 max) {
    return rm_i64x2(rm_clamp_i64(v.x, min.x, max.x), rm_clamp_i64(v.y, min.y, max.y));
}
RM_INLINE i64x3 rm_clamp_i64x3(const i64x3 v, const i64x3 min, const i64x3 max) {
    return rm_i64x3(rm_clamp_i64(v.x, min.x, max.x), rm_clamp_i64(v.y, min.y, max.y),
                    rm_clamp_i64(v.z, min.z, max.z));
}
RM_INLINE i64x4 rm_clamp_i64x4(const i64x4 v, const i64x4 min, const i64x4 max) {
    return rm_i64x4(rm_clamp_i64(v.x, min.x, max.x), rm_clamp_i64(v.y, min.y, max.y),
                    rm_clamp_i64(v.z, min.z, max.z), rm_clamp_i64(v.w, min.w, max.w));
}
RM_INLINE i64x2 rm_sign_i64x2(const i64x2 v) {
    return rm_i64x2(rm_sign_i64(v.x), rm_sign_i64(v.y));
}
RM_INLINE i64x3 rm_sign_i64x3(const i64x3 v) {
    return rm_i64x3(rm_sign_i64(v.x), rm_sign_i64(v.y),
                    rm_sign_i64(v.z));
}
RM_INLINE i64x4 rm_sign_i64x4(const i64x4 v) {
    return rm_i64x4(rm_sign_i64(v.x), rm_sign_i64(v.y),
                    rm_sign_i64(v.z), rm_sign_i64(v.w));
}
RM_INLINE i64x2 rm_copysign_i64x2(const i64x2 v, const i64x2 s) {
    return rm_i64x2(rm_copysign_i64(v.x, s.x), rm_copysign_i64(v.y, s.y));
}
RM_INLINE i64x3 rm_copysign_i64x3(const i64x3 v, const i64x3 s) {
    return rm_i64x3(rm_copysign_i64(v.x, s.x), rm_copysign_i64(v.y, s.y),
                    rm_copysign_i64(v.z, s.z));
}
RM_INLINE i64x4 rm_copysign_i64x4(const i64x4 v, const i64x4 s) {
    return rm_i64x4(rm_copysign_i64(v.x, s.x), rm_copysign_i64(v.y, s.y),
                    rm_copysign_i64(v.z, s.z), rm_copysign_i64(v.w, s.w));
}
RM_INLINE i64x2 rm_fma_i64x2(const i64x2 a, const i64x2 b, const i64x2 c) {
    return rm_add_i64x2(rm_mul_i64x2(a, b), c);
}
RM_INLINE i64x3 rm_fma_i64x3(const i64x3 a, const i64x3 b, const i64x3 c) {
    return rm_add_i64x3(rm_mul_i64x3(a, b), c);
}
RM_INLINE i64x4 rm_fma_i64x4(const i64x4 a, const i64x4 b, const i64x4 c) {
    return rm_add_i64x4(rm_mul_i64x4(a, b), c);
}
RM_INLINE i64x2 rm_mins_i64x2(const i64x2 v, const i64 s) {
    return rm_min_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x3 rm_mins_i64x3(const i64x3 v, const i64 s) {
    return rm_min_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x4 rm_mins_i64x4(const i64x4 v, const i64 s) {
    return rm_min_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x2 rm_maxs_i64x2(const i64x2 v, const i64 s) {
    return rm_max_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x3 rm_maxs_i64x3(const i64x3 v, const i64 s) {
    return rm_max_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x4 rm_maxs_i64x4(const i64x4 v, const i64 s) {
    return rm_max_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x2 rm_adds_i64x2(const i64x2 v, const i64 s) {
    return rm_add_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x3 rm_adds_i64x3(const i64x3 v, const i64 s) {
    return rm_add_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x4 rm_adds_i64x4(const i64x4 v, const i64 s) {
    return rm_add_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x2 rm_subs_i64x2(const i64x2 v, const i64 s) {
    return rm_sub_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x2 rm_ssub_i64x2(const i64 s, const i64x2 v) {
    return rm_sub_i64x2(rm_i64x2s(s), v);
}
RM_INLINE i64x3 rm_subs_i64x3(const i64x3 v, const i64 s) {
    return rm_sub_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x3 rm_ssub_i64x3(const i64 s, const i64x3 v) {
    return rm_sub_i64x3(rm_i64x3s(s), v);
}
RM_INLINE i64x4 rm_subs_i64x4(const i64x4 v, const i64 s) {
    return rm_sub_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x4 rm_ssub_i64x4(const i64 s, const i64x4 v) {
    return rm_sub_i64x4(rm_i64x4s(s), v);
}
RM_INLINE i64x2 rm_muls_i64x2(const i64x2 v, const i64 s) {
    return rm_mul_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x3 rm_muls_i64x3(const i64x3 v, const i64 s) {
    return rm_mul_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x4 rm_muls_i64x4(const i64x4 v, const i64 s) {
    return rm_mul_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x2 rm_divs_i64x2(const i64x2 v, const i64 s) {
    return rm_div_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x2 rm_sdiv_i64x2(const i64 s, const i64x2 v) {
    return rm_div_i64x2(rm_i64x2s(s), v);
}
RM_INLINE i64x3 rm_divs_i64x3(const i64x3 v, const i64 s) {
    return rm_div_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x3 rm_sdiv_i64x3(const i64 s, const i64x3 v) {
    return rm_div_i64x3(rm_i64x3s(s), v);
}
RM_INLINE i64x4 rm_divs_i64x4(const i64x4 v, const i64 s) {
    return rm_div_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x4 rm_sdiv_i64x4(const i64 s, const i64x4 v) {
    return rm_div_i64x4(rm_i64x4s(s), v);
}
RM_INLINE i64x2 rm_mods_i64x2(const i64x2 v, const i64 s) {
    return rm_mod_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x2 rm_smod_i64x2(const i64 s, const i64x2 v) {
    return rm_mod_i64x2(rm_i64x2s(s), v);
}
RM_INLINE i64x3 rm_mods_i64x3(const i64x3 v, const i64 s) {
    return rm_mod_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x3 rm_smod_i64x3(const i64 s, const i64x3 v) {
    return rm_mod_i64x3(rm_i64x3s(s), v);
}
RM_INLINE i64x4 rm_mods_i64x4(const i64x4 v, const i64 s) {
    return rm_mod_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x4 rm_smod_i64x4(const i64 s, const i64x4 v) {
    return rm_mod_i64x4(rm_i64x4s(s), v);
}
RM_INLINE i64x2 rm_clamps_i64x2(const i64x2 v, i64 min, i64 max) {
    return rm_clamp_i64x2(v, rm_i64x2s(min), rm_i64x2s(max));
}
RM_INLINE i64x2 rm_copysigns_i64x2(const i64x2 v, const i64 s) {
    return rm_copysign_i64x2(v, rm_i64x2s(s));
}
RM_INLINE i64x2 rm_fmas_i64x2(const i64x2 a, const i64x2 b, const i64 c) {
    return rm_adds_i64x2(rm_mul_i64x2(a, b), c);
}
RM_INLINE i64x2 rm_fmass_i64x2(const i64x2 a, const i64 b, const i64 c) {
    return rm_adds_i64x2(rm_muls_i64x2(a, b), c);
}
RM_INLINE i64x3 rm_clamps_i64x3(const i64x3 v, i64 min, i64 max) {
    return rm_clamp_i64x3(v, rm_i64x3s(min), rm_i64x3s(max));
}
RM_INLINE i64x3 rm_copysigns_i64x3(const i64x3 v, const i64 s) {
    return rm_copysign_i64x3(v, rm_i64x3s(s));
}
RM_INLINE i64x3 rm_fmas_i64x3(const i64x3 a, const i64x3 b, const i64 c) {
    return rm_adds_i64x3(rm_mul_i64x3(a, b), c);
}
RM_INLINE i64x3 rm_fmass_i64x3(const i64x3 a, const i64 b, const i64 c) {
    return rm_adds_i64x3(rm_muls_i64x3(a, b), c);
}
RM_INLINE i64x4 rm_clamps_i64x4(const i64x4 v, i64 min, i64 max) {
    return rm_clamp_i64x4(v, rm_i64x4s(min), rm_i64x4s(max));
}
RM_INLINE i64x4 rm_copysigns_i64x4(const i64x4 v, const i64 s) {
    return rm_copysign_i64x4(v, rm_i64x4s(s));
}
RM_INLINE i64x4 rm_fmas_i64x4(const i64x4 a, const i64x4 b, const i64 c) {
    return rm_adds_i64x4(rm_mul_i64x4(a, b), c);
}
RM_INLINE i64x4 rm_fmass_i64x4(const i64x4 a, const i64 b, const i64 c) {
    return rm_adds_i64x4(rm_muls_i64x4(a, b), c);
}
RM_INLINE f32x2 rm_min_f32x2(const f32x2 a, const f32x2 b) {
    return rm_f32x2(rm_min_f32(a.x, b.x), rm_min_f32(a.y, b.y));
}
RM_INLINE f32x3 rm_min_f32x3(const f32x3 a, const f32x3 b) {
    return rm_f32x3(rm_min_f32(a.x, b.x), rm_min_f32(a.y, b.y),
                    rm_min_f32(a.z, b.z));
}
RM_INLINE f32x4 rm_min_f32x4(const f32x4 a, const f32x4 b) {
    return rm_f32x4(rm_min_f32(a.x, b.x), rm_min_f32(a.y, b.y),
                    rm_min_f32(a.z, b.z), rm_min_f32(a.w, b.w));
}
RM_INLINE f32x2 rm_max_f32x2(const f32x2 a, const f32x2 b) {
    return rm_f32x2(rm_max_f32(a.x, b.x), rm_max_f32(a.y, b.y));
}
RM_INLINE f32x3 rm_max_f32x3(const f32x3 a, const f32x3 b) {
    return rm_f32x3(rm_max_f32(a.x, b.x), rm_max_f32(a.y, b.y),
                    rm_max_f32(a.z, b.z));
}
RM_INLINE f32x4 rm_max_f32x4(const f32x4 a, const f32x4 b) {
    return rm_f32x4(rm_max_f32(a.x, b.x), rm_max_f32(a.y, b.y),
                    rm_max_f32(a.z, b.z), rm_max_f32(a.w, b.w));
}
RM_INLINE f32x2 rm_add_f32x2(const f32x2 a, const f32x2 b) {
    return rm_f32x2(a.x + b.x, a.y + b.y);
}
RM_INLINE f32x3 rm_add_f32x3(const f32x3 a, const f32x3 b) {
    return rm_f32x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE f32x4 rm_add_f32x4(const f32x4 a, const f32x4 b) {
    return rm_f32x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE f32x2 rm_sub_f32x2(const f32x2 a, const f32x2 b) {
    return rm_f32x2(a.x - b.x, a.y - b.y);
}
RM_INLINE f32x3 rm_sub_f32x3(const f32x3 a, const f32x3 b) {
    return rm_f32x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE f32x4 rm_sub_f32x4(const f32x4 a, const f32x4 b) {
    return rm_f32x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE f32x2 rm_mul_f32x2(const f32x2 a, const f32x2 b) {
    return rm_f32x2(a.x * b.x, a.y * b.y);
}
RM_INLINE f32x3 rm_mul_f32x3(const f32x3 a, const f32x3 b) {
    return rm_f32x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE f32x4 rm_mul_f32x4(const f32x4 a, const f32x4 b) {
    return rm_f32x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE f32x2 rm_div_f32x2(const f32x2 a, const f32x2 b) {
    return rm_f32x2(a.x / b.x, a.y / b.y);
}
RM_INLINE f32x3 rm_div_f32x3(const f32x3 a, const f32x3 b) {
    return rm_f32x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE f32x4 rm_div_f32x4(const f32x4 a, const f32x4 b) {
    return rm_f32x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE f32x2 rm_mod_f32x2(const f32x2 a, const f32x2 b) {
    return rm_f32x2(rm_mod_f32(a.x, b.x), rm_mod_f32(a.y, b.y));
}
RM_INLINE f32x3 rm_mod_f32x3(const f32x3 a, const f32x3 b) {
    return rm_f32x3(rm_mod_f32(a.x, b.x), rm_mod_f32(a.y, b.y),
                    rm_mod_f32(a.z, b.z));
}
RM_INLINE f32x4 rm_mod_f32x4(const f32x4 a, const f32x4 b) {
    return rm_f32x4(rm_mod_f32(a.x, b.x), rm_mod_f32(a.y, b.y),
                    rm_mod_f32(a.z, b.z), rm_mod_f32(a.w, b.w));
}
RM_INLINE f32x2 rm_clamp_f32x2(const f32x2 v, const f32x2 min, const f32x2 max) {
    return rm_f32x2(rm_clamp_f32(v.x, min.x, max.x), rm_clamp_f32(v.y, min.y, max.y));
}
RM_INLINE f32x3 rm_clamp_f32x3(const f32x3 v, const f32x3 min, const f32x3 max) {
    return rm_f32x3(rm_clamp_f32(v.x, min.x, max.x), rm_clamp_f32(v.y, min.y, max.y),
                    rm_clamp_f32(v.z, min.z, max.z));
}
RM_INLINE f32x4 rm_clamp_f32x4(const f32x4 v, const f32x4 min, const f32x4 max) {
    return rm_f32x4(rm_clamp_f32(v.x, min.x, max.x), rm_clamp_f32(v.y, min.y, max.y),
                    rm_clamp_f32(v.z, min.z, max.z), rm_clamp_f32(v.w, min.w, max.w));
}
RM_INLINE f32x2 rm_sign_f32x2(const f32x2 v) {
    return rm_f32x2(rm_sign_f32(v.x), rm_sign_f32(v.y));
}
RM_INLINE f32x3 rm_sign_f32x3(const f32x3 v) {
    return rm_f32x3(rm_sign_f32(v.x), rm_sign_f32(v.y),
                    rm_sign_f32(v.z));
}
RM_INLINE f32x4 rm_sign_f32x4(const f32x4 v) {
    return rm_f32x4(rm_sign_f32(v.x), rm_sign_f32(v.y),
                    rm_sign_f32(v.z), rm_sign_f32(v.w));
}
RM_INLINE f32x2 rm_copysign_f32x2(const f32x2 v, const f32x2 s) {
    return rm_f32x2(rm_copysign_f32(v.x, s.x), rm_copysign_f32(v.y, s.y));
}
RM_INLINE f32x3 rm_copysign_f32x3(const f32x3 v, const f32x3 s) {
    return rm_f32x3(rm_copysign_f32(v.x, s.x), rm_copysign_f32(v.y, s.y),
                    rm_copysign_f32(v.z, s.z));
}
RM_INLINE f32x4 rm_copysign_f32x4(const f32x4 v, const f32x4 s) {
    return rm_f32x4(rm_copysign_f32(v.x, s.x), rm_copysign_f32(v.y, s.y),
                    rm_copysign_f32(v.z, s.z), rm_copysign_f32(v.w, s.w));
}
RM_INLINE f32x2 rm_fma_f32x2(const f32x2 a, const f32x2 b, const f32x2 c) {
    return rm_add_f32x2(rm_mul_f32x2(a, b), c);
}
RM_INLINE f32x3 rm_fma_f32x3(const f32x3 a, const f32x3 b, const f32x3 c) {
    return rm_add_f32x3(rm_mul_f32x3(a, b), c);
}
RM_INLINE f32x4 rm_fma_f32x4(const f32x4 a, const f32x4 b, const f32x4 c) {
    return rm_add_f32x4(rm_mul_f32x4(a, b), c);
}
RM_INLINE f32x2 rm_mins_f32x2(const f32x2 v, const f32 s) {
    return rm_min_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x3 rm_mins_f32x3(const f32x3 v, const f32 s) {
    return rm_min_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x4 rm_mins_f32x4(const f32x4 v, const f32 s) {
    return rm_min_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x2 rm_maxs_f32x2(const f32x2 v, const f32 s) {
    return rm_max_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x3 rm_maxs_f32x3(const f32x3 v, const f32 s) {
    return rm_max_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x4 rm_maxs_f32x4(const f32x4 v, const f32 s) {
    return rm_max_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x2 rm_adds_f32x2(const f32x2 v, const f32 s) {
    return rm_add_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x3 rm_adds_f32x3(const f32x3 v, const f32 s) {
    return rm_add_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x4 rm_adds_f32x4(const f32x4 v, const f32 s) {
    return rm_add_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x2 rm_subs_f32x2(const f32x2 v, const f32 s) {
    return rm_sub_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x2 rm_ssub_f32x2(const f32 s, const f32x2 v) {
    return rm_sub_f32x2(rm_f32x2s(s), v);
}
RM_INLINE f32x3 rm_subs_f32x3(const f32x3 v, const f32 s) {
    return rm_sub_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x3 rm_ssub_f32x3(const f32 s, const f32x3 v) {
    return rm_sub_f32x3(rm_f32x3s(s), v);
}
RM_INLINE f32x4 rm_subs_f32x4(const f32x4 v, const f32 s) {
    return rm_sub_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x4 rm_ssub_f32x4(const f32 s, const f32x4 v) {
    return rm_sub_f32x4(rm_f32x4s(s), v);
}
RM_INLINE f32x2 rm_muls_f32x2(const f32x2 v, const f32 s) {
    return rm_mul_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x3 rm_muls_f32x3(const f32x3 v, const f32 s) {
    return rm_mul_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x4 rm_muls_f32x4(const f32x4 v, const f32 s) {
    return rm_mul_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x2 rm_divs_f32x2(const f32x2 v, const f32 s) {
    return rm_div_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x2 rm_sdiv_f32x2(const f32 s, const f32x2 v) {
    return rm_div_f32x2(rm_f32x2s(s), v);
}
RM_INLINE f32x3 rm_divs_f32x3(const f32x3 v, const f32 s) {
    return rm_div_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x3 rm_sdiv_f32x3(const f32 s, const f32x3 v) {
    return rm_div_f32x3(rm_f32x3s(s), v);
}
RM_INLINE f32x4 rm_divs_f32x4(const f32x4 v, const f32 s) {
    return rm_div_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x4 rm_sdiv_f32x4(const f32 s, const f32x4 v) {
    return rm_div_f32x4(rm_f32x4s(s), v);
}
RM_INLINE f32x2 rm_mods_f32x2(const f32x2 v, const f32 s) {
    return rm_mod_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x2 rm_smod_f32x2(const f32 s, const f32x2 v) {
    return rm_mod_f32x2(rm_f32x2s(s), v);
}
RM_INLINE f32x3 rm_mods_f32x3(const f32x3 v, const f32 s) {
    return rm_mod_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x3 rm_smod_f32x3(const f32 s, const f32x3 v) {
    return rm_mod_f32x3(rm_f32x3s(s), v);
}
RM_INLINE f32x4 rm_mods_f32x4(const f32x4 v, const f32 s) {
    return rm_mod_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x4 rm_smod_f32x4(const f32 s, const f32x4 v) {
    return rm_mod_f32x4(rm_f32x4s(s), v);
}
RM_INLINE f32x2 rm_clamps_f32x2(const f32x2 v, f32 min, f32 max) {
    return rm_clamp_f32x2(v, rm_f32x2s(min), rm_f32x2s(max));
}
RM_INLINE f32x2 rm_copysigns_f32x2(const f32x2 v, const f32 s) {
    return rm_copysign_f32x2(v, rm_f32x2s(s));
}
RM_INLINE f32x2 rm_fmas_f32x2(const f32x2 a, const f32x2 b, const f32 c) {
    return rm_adds_f32x2(rm_mul_f32x2(a, b), c);
}
RM_INLINE f32x2 rm_fmass_f32x2(const f32x2 a, const f32 b, const f32 c) {
    return rm_adds_f32x2(rm_muls_f32x2(a, b), c);
}
RM_INLINE f32x3 rm_clamps_f32x3(const f32x3 v, f32 min, f32 max) {
    return rm_clamp_f32x3(v, rm_f32x3s(min), rm_f32x3s(max));
}
RM_INLINE f32x3 rm_copysigns_f32x3(const f32x3 v, const f32 s) {
    return rm_copysign_f32x3(v, rm_f32x3s(s));
}
RM_INLINE f32x3 rm_fmas_f32x3(const f32x3 a, const f32x3 b, const f32 c) {
    return rm_adds_f32x3(rm_mul_f32x3(a, b), c);
}
RM_INLINE f32x3 rm_fmass_f32x3(const f32x3 a, const f32 b, const f32 c) {
    return rm_adds_f32x3(rm_muls_f32x3(a, b), c);
}
RM_INLINE f32x4 rm_clamps_f32x4(const f32x4 v, f32 min, f32 max) {
    return rm_clamp_f32x4(v, rm_f32x4s(min), rm_f32x4s(max));
}
RM_INLINE f32x4 rm_copysigns_f32x4(const f32x4 v, const f32 s) {
    return rm_copysign_f32x4(v, rm_f32x4s(s));
}
RM_INLINE f32x4 rm_fmas_f32x4(const f32x4 a, const f32x4 b, const f32 c) {
    return rm_adds_f32x4(rm_mul_f32x4(a, b), c);
}
RM_INLINE f32x4 rm_fmass_f32x4(const f32x4 a, const f32 b, const f32 c) {
    return rm_adds_f32x4(rm_muls_f32x4(a, b), c);
}
RM_INLINE f64x2 rm_min_f64x2(const f64x2 a, const f64x2 b) {
    return rm_f64x2(rm_min_f64(a.x, b.x), rm_min_f64(a.y, b.y));
}
RM_INLINE f64x3 rm_min_f64x3(const f64x3 a, const f64x3 b) {
    return rm_f64x3(rm_min_f64(a.x, b.x), rm_min_f64(a.y, b.y),
                    rm_min_f64(a.z, b.z));
}
RM_INLINE f64x4 rm_min_f64x4(const f64x4 a, const f64x4 b) {
    return rm_f64x4(rm_min_f64(a.x, b.x), rm_min_f64(a.y, b.y),
                    rm_min_f64(a.z, b.z), rm_min_f64(a.w, b.w));
}
RM_INLINE f64x2 rm_max_f64x2(const f64x2 a, const f64x2 b) {
    return rm_f64x2(rm_max_f64(a.x, b.x), rm_max_f64(a.y, b.y));
}
RM_INLINE f64x3 rm_max_f64x3(const f64x3 a, const f64x3 b) {
    return rm_f64x3(rm_max_f64(a.x, b.x), rm_max_f64(a.y, b.y),
                    rm_max_f64(a.z, b.z));
}
RM_INLINE f64x4 rm_max_f64x4(const f64x4 a, const f64x4 b) {
    return rm_f64x4(rm_max_f64(a.x, b.x), rm_max_f64(a.y, b.y),
                    rm_max_f64(a.z, b.z), rm_max_f64(a.w, b.w));
}
RM_INLINE f64x2 rm_add_f64x2(const f64x2 a, const f64x2 b) {
    return rm_f64x2(a.x + b.x, a.y + b.y);
}
RM_INLINE f64x3 rm_add_f64x3(const f64x3 a, const f64x3 b) {
    return rm_f64x3(a.x + b.x, a.y + b.y, a.z + b.z);
}
RM_INLINE f64x4 rm_add_f64x4(const f64x4 a, const f64x4 b) {
    return rm_f64x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
RM_INLINE f64x2 rm_sub_f64x2(const f64x2 a, const f64x2 b) {
    return rm_f64x2(a.x - b.x, a.y - b.y);
}
RM_INLINE f64x3 rm_sub_f64x3(const f64x3 a, const f64x3 b) {
    return rm_f64x3(a.x - b.x, a.y - b.y, a.z - b.z);
}
RM_INLINE f64x4 rm_sub_f64x4(const f64x4 a, const f64x4 b) {
    return rm_f64x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
RM_INLINE f64x2 rm_mul_f64x2(const f64x2 a, const f64x2 b) {
    return rm_f64x2(a.x * b.x, a.y * b.y);
}
RM_INLINE f64x3 rm_mul_f64x3(const f64x3 a, const f64x3 b) {
    return rm_f64x3(a.x * b.x, a.y * b.y, a.z * b.z);
}
RM_INLINE f64x4 rm_mul_f64x4(const f64x4 a, const f64x4 b) {
    return rm_f64x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
RM_INLINE f64x2 rm_div_f64x2(const f64x2 a, const f64x2 b) {
    return rm_f64x2(a.x / b.x, a.y / b.y);
}
RM_INLINE f64x3 rm_div_f64x3(const f64x3 a, const f64x3 b) {
    return rm_f64x3(a.x / b.x, a.y / b.y, a.z / b.z);
}
RM_INLINE f64x4 rm_div_f64x4(const f64x4 a, const f64x4 b) {
    return rm_f64x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
RM_INLINE f64x2 rm_mod_f64x2(const f64x2 a, const f64x2 b) {
    return rm_f64x2(rm_mod_f64(a.x, b.x), rm_mod_f64(a.y, b.y));
}
RM_INLINE f64x3 rm_mod_f64x3(const f64x3 a, const f64x3 b) {
    return rm_f64x3(rm_mod_f64(a.x, b.x), rm_mod_f64(a.y, b.y),
                    rm_mod_f64(a.z, b.z));
}
RM_INLINE f64x4 rm_mod_f64x4(const f64x4 a, const f64x4 b) {
    return rm_f64x4(rm_mod_f64(a.x, b.x), rm_mod_f64(a.y, b.y),
                    rm_mod_f64(a.z, b.z), rm_mod_f64(a.w, b.w));
}
RM_INLINE f64x2 rm_clamp_f64x2(const f64x2 v, const f64x2 min, const f64x2 max) {
    return rm_f64x2(rm_clamp_f64(v.x, min.x, max.x), rm_clamp_f64(v.y, min.y, max.y));
}
RM_INLINE f64x3 rm_clamp_f64x3(const f64x3 v, const f64x3 min, const f64x3 max) {
    return rm_f64x3(rm_clamp_f64(v.x, min.x, max.x), rm_clamp_f64(v.y, min.y, max.y),
                    rm_clamp_f64(v.z, min.z, max.z));
}
RM_INLINE f64x4 rm_clamp_f64x4(const f64x4 v, const f64x4 min, const f64x4 max) {
    return rm_f64x4(rm_clamp_f64(v.x, min.x, max.x), rm_clamp_f64(v.y, min.y, max.y),
                    rm_clamp_f64(v.z, min.z, max.z), rm_clamp_f64(v.w, min.w, max.w));
}
RM_INLINE f64x2 rm_sign_f64x2(const f64x2 v) {
    return rm_f64x2(rm_sign_f64(v.x), rm_sign_f64(v.y));
}
RM_INLINE f64x3 rm_sign_f64x3(const f64x3 v) {
    return rm_f64x3(rm_sign_f64(v.x), rm_sign_f64(v.y),
                    rm_sign_f64(v.z));
}
RM_INLINE f64x4 rm_sign_f64x4(const f64x4 v) {
    return rm_f64x4(rm_sign_f64(v.x), rm_sign_f64(v.y),
                    rm_sign_f64(v.z), rm_sign_f64(v.w));
}
RM_INLINE f64x2 rm_copysign_f64x2(const f64x2 v, const f64x2 s) {
    return rm_f64x2(rm_copysign_f64(v.x, s.x), rm_copysign_f64(v.y, s.y));
}
RM_INLINE f64x3 rm_copysign_f64x3(const f64x3 v, const f64x3 s) {
    return rm_f64x3(rm_copysign_f64(v.x, s.x), rm_copysign_f64(v.y, s.y),
                    rm_copysign_f64(v.z, s.z));
}
RM_INLINE f64x4 rm_copysign_f64x4(const f64x4 v, const f64x4 s) {
    return rm_f64x4(rm_copysign_f64(v.x, s.x), rm_copysign_f64(v.y, s.y),
                    rm_copysign_f64(v.z, s.z), rm_copysign_f64(v.w, s.w));
}
RM_INLINE f64x2 rm_fma_f64x2(const f64x2 a, const f64x2 b, const f64x2 c) {
    return rm_add_f64x2(rm_mul_f64x2(a, b), c);
}
RM_INLINE f64x3 rm_fma_f64x3(const f64x3 a, const f64x3 b, const f64x3 c) {
    return rm_add_f64x3(rm_mul_f64x3(a, b), c);
}
RM_INLINE f64x4 rm_fma_f64x4(const f64x4 a, const f64x4 b, const f64x4 c) {
    return rm_add_f64x4(rm_mul_f64x4(a, b), c);
}
RM_INLINE f64x2 rm_mins_f64x2(const f64x2 v, const f64 s) {
    return rm_min_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x3 rm_mins_f64x3(const f64x3 v, const f64 s) {
    return rm_min_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x4 rm_mins_f64x4(const f64x4 v, const f64 s) {
    return rm_min_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x2 rm_maxs_f64x2(const f64x2 v, const f64 s) {
    return rm_max_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x3 rm_maxs_f64x3(const f64x3 v, const f64 s) {
    return rm_max_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x4 rm_maxs_f64x4(const f64x4 v, const f64 s) {
    return rm_max_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x2 rm_adds_f64x2(const f64x2 v, const f64 s) {
    return rm_add_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x3 rm_adds_f64x3(const f64x3 v, const f64 s) {
    return rm_add_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x4 rm_adds_f64x4(const f64x4 v, const f64 s) {
    return rm_add_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x2 rm_subs_f64x2(const f64x2 v, const f64 s) {
    return rm_sub_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x2 rm_ssub_f64x2(const f64 s, const f64x2 v) {
    return rm_sub_f64x2(rm_f64x2s(s), v);
}
RM_INLINE f64x3 rm_subs_f64x3(const f64x3 v, const f64 s) {
    return rm_sub_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x3 rm_ssub_f64x3(const f64 s, const f64x3 v) {
    return rm_sub_f64x3(rm_f64x3s(s), v);
}
RM_INLINE f64x4 rm_subs_f64x4(const f64x4 v, const f64 s) {
    return rm_sub_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x4 rm_ssub_f64x4(const f64 s, const f64x4 v) {
    return rm_sub_f64x4(rm_f64x4s(s), v);
}
RM_INLINE f64x2 rm_muls_f64x2(const f64x2 v, const f64 s) {
    return rm_mul_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x3 rm_muls_f64x3(const f64x3 v, const f64 s) {
    return rm_mul_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x4 rm_muls_f64x4(const f64x4 v, const f64 s) {
    return rm_mul_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x2 rm_divs_f64x2(const f64x2 v, const f64 s) {
    return rm_div_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x2 rm_sdiv_f64x2(const f64 s, const f64x2 v) {
    return rm_div_f64x2(rm_f64x2s(s), v);
}
RM_INLINE f64x3 rm_divs_f64x3(const f64x3 v, const f64 s) {
    return rm_div_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x3 rm_sdiv_f64x3(const f64 s, const f64x3 v) {
    return rm_div_f64x3(rm_f64x3s(s), v);
}
RM_INLINE f64x4 rm_divs_f64x4(const f64x4 v, const f64 s) {
    return rm_div_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x4 rm_sdiv_f64x4(const f64 s, const f64x4 v) {
    return rm_div_f64x4(rm_f64x4s(s), v);
}
RM_INLINE f64x2 rm_mods_f64x2(const f64x2 v, const f64 s) {
    return rm_mod_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x2 rm_smod_f64x2(const f64 s, const f64x2 v) {
    return rm_mod_f64x2(rm_f64x2s(s), v);
}
RM_INLINE f64x3 rm_mods_f64x3(const f64x3 v, const f64 s) {
    return rm_mod_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x3 rm_smod_f64x3(const f64 s, const f64x3 v) {
    return rm_mod_f64x3(rm_f64x3s(s), v);
}
RM_INLINE f64x4 rm_mods_f64x4(const f64x4 v, const f64 s) {
    return rm_mod_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x4 rm_smod_f64x4(const f64 s, const f64x4 v) {
    return rm_mod_f64x4(rm_f64x4s(s), v);
}
RM_INLINE f64x2 rm_clamps_f64x2(const f64x2 v, f64 min, f64 max) {
    return rm_clamp_f64x2(v, rm_f64x2s(min), rm_f64x2s(max));
}
RM_INLINE f64x2 rm_copysigns_f64x2(const f64x2 v, const f64 s) {
    return rm_copysign_f64x2(v, rm_f64x2s(s));
}
RM_INLINE f64x2 rm_fmas_f64x2(const f64x2 a, const f64x2 b, const f64 c) {
    return rm_adds_f64x2(rm_mul_f64x2(a, b), c);
}
RM_INLINE f64x2 rm_fmass_f64x2(const f64x2 a, const f64 b, const f64 c) {
    return rm_adds_f64x2(rm_muls_f64x2(a, b), c);
}
RM_INLINE f64x3 rm_clamps_f64x3(const f64x3 v, f64 min, f64 max) {
    return rm_clamp_f64x3(v, rm_f64x3s(min), rm_f64x3s(max));
}
RM_INLINE f64x3 rm_copysigns_f64x3(const f64x3 v, const f64 s) {
    return rm_copysign_f64x3(v, rm_f64x3s(s));
}
RM_INLINE f64x3 rm_fmas_f64x3(const f64x3 a, const f64x3 b, const f64 c) {
    return rm_adds_f64x3(rm_mul_f64x3(a, b), c);
}
RM_INLINE f64x3 rm_fmass_f64x3(const f64x3 a, const f64 b, const f64 c) {
    return rm_adds_f64x3(rm_muls_f64x3(a, b), c);
}
RM_INLINE f64x4 rm_clamps_f64x4(const f64x4 v, f64 min, f64 max) {
    return rm_clamp_f64x4(v, rm_f64x4s(min), rm_f64x4s(max));
}
RM_INLINE f64x4 rm_copysigns_f64x4(const f64x4 v, const f64 s) {
    return rm_copysign_f64x4(v, rm_f64x4s(s));
}
RM_INLINE f64x4 rm_fmas_f64x4(const f64x4 a, const f64x4 b, const f64 c) {
    return rm_adds_f64x4(rm_mul_f64x4(a, b), c);
}
RM_INLINE f64x4 rm_fmass_f64x4(const f64x4 a, const f64 b, const f64 c) {
    return rm_adds_f64x4(rm_muls_f64x4(a, b), c);
}
RM_INLINE f32x2 rm_floor_f32x2(const f32x2 v) {
    return rm_f32x2(rm_floor_f32(v.x), rm_floor_f32(v.y));
}
RM_INLINE f32x3 rm_floor_f32x3(const f32x3 v) {
    return rm_f32x3(rm_floor_f32(v.x), rm_floor_f32(v.y),
                    rm_floor_f32(v.z));
}
RM_INLINE f32x4 rm_floor_f32x4(const f32x4 v) {
    return rm_f32x4(rm_floor_f32(v.x), rm_floor_f32(v.y),
                    rm_floor_f32(v.z), rm_floor_f32(v.w));
}
RM_INLINE f32x2 rm_ceil_f32x2(const f32x2 v) {
    return rm_f32x2(rm_ceil_f32(v.x), rm_ceil_f32(v.y));
}
RM_INLINE f32x3 rm_ceil_f32x3(const f32x3 v) {
    return rm_f32x3(rm_ceil_f32(v.x), rm_ceil_f32(v.y),
                    rm_ceil_f32(v.z));
}
RM_INLINE f32x4 rm_ceil_f32x4(const f32x4 v) {
    return rm_f32x4(rm_ceil_f32(v.x), rm_ceil_f32(v.y),
                    rm_ceil_f32(v.z), rm_ceil_f32(v.w));
}
RM_INLINE f32x2 rm_round_f32x2(const f32x2 v) {
    return rm_f32x2(rm_round_f32(v.x), rm_round_f32(v.y));
}
RM_INLINE f32x3 rm_round_f32x3(const f32x3 v) {
    return rm_f32x3(rm_round_f32(v.x), rm_round_f32(v.y),
                    rm_round_f32(v.z));
}
RM_INLINE f32x4 rm_round_f32x4(const f32x4 v) {
    return rm_f32x4(rm_round_f32(v.x), rm_round_f32(v.y),
                    rm_round_f32(v.z), rm_round_f32(v.w));
}
RM_INLINE f32x2 rm_trunc_f32x2(const f32x2 v) {
    return rm_f32x2(rm_trunc_f32(v.x), rm_trunc_f32(v.y));
}
RM_INLINE f32x3 rm_trunc_f32x3(const f32x3 v) {
    return rm_f32x3(rm_trunc_f32(v.x), rm_trunc_f32(v.y),
                    rm_trunc_f32(v.z));
}
RM_INLINE f32x4 rm_trunc_f32x4(const f32x4 v) {
    return rm_f32x4(rm_trunc_f32(v.x), rm_trunc_f32(v.y),
                    rm_trunc_f32(v.z), rm_trunc_f32(v.w));
}
RM_INLINE f32x2 rm_fract_f32x2(const f32x2 v) {
    return rm_f32x2(rm_fract_f32(v.x), rm_fract_f32(v.y));
}
RM_INLINE f32x3 rm_fract_f32x3(const f32x3 v) {
    return rm_f32x3(rm_fract_f32(v.x), rm_fract_f32(v.y),
                    rm_fract_f32(v.z));
}
RM_INLINE f32x4 rm_fract_f32x4(const f32x4 v) {
    return rm_f32x4(rm_fract_f32(v.x), rm_fract_f32(v.y),
                    rm_fract_f32(v.z), rm_fract_f32(v.w));
}
RM_INLINE f64x2 rm_floor_f64x2(const f64x2 v) {
    return rm_f64x2(rm_floor_f64(v.x), rm_floor_f64(v.y));
}
RM_INLINE f64x3 rm_floor_f64x3(const f64x3 v) {
    return rm_f64x3(rm_floor_f64(v.x), rm_floor_f64(v.y),
                    rm_floor_f64(v.z));
}
RM_INLINE f64x4 rm_floor_f64x4(const f64x4 v) {
    return rm_f64x4(rm_floor_f64(v.x), rm_floor_f64(v.y),
                    rm_floor_f64(v.z), rm_floor_f64(v.w));
}
RM_INLINE f64x2 rm_ceil_f64x2(const f64x2 v) {
    return rm_f64x2(rm_ceil_f64(v.x), rm_ceil_f64(v.y));
}
RM_INLINE f64x3 rm_ceil_f64x3(const f64x3 v) {
    return rm_f64x3(rm_ceil_f64(v.x), rm_ceil_f64(v.y),
                    rm_ceil_f64(v.z));
}
RM_INLINE f64x4 rm_ceil_f64x4(const f64x4 v) {
    return rm_f64x4(rm_ceil_f64(v.x), rm_ceil_f64(v.y),
                    rm_ceil_f64(v.z), rm_ceil_f64(v.w));
}
RM_INLINE f64x2 rm_round_f64x2(const f64x2 v) {
    return rm_f64x2(rm_round_f64(v.x), rm_round_f64(v.y));
}
RM_INLINE f64x3 rm_round_f64x3(const f64x3 v) {
    return rm_f64x3(rm_round_f64(v.x), rm_round_f64(v.y),
                    rm_round_f64(v.z));
}
RM_INLINE f64x4 rm_round_f64x4(const f64x4 v) {
    return rm_f64x4(rm_round_f64(v.x), rm_round_f64(v.y),
                    rm_round_f64(v.z), rm_round_f64(v.w));
}
RM_INLINE f64x2 rm_trunc_f64x2(const f64x2 v) {
    return rm_f64x2(rm_trunc_f64(v.x), rm_trunc_f64(v.y));
}
RM_INLINE f64x3 rm_trunc_f64x3(const f64x3 v) {
    return rm_f64x3(rm_trunc_f64(v.x), rm_trunc_f64(v.y),
                    rm_trunc_f64(v.z));
}
RM_INLINE f64x4 rm_trunc_f64x4(const f64x4 v) {
    return rm_f64x4(rm_trunc_f64(v.x), rm_trunc_f64(v.y),
                    rm_trunc_f64(v.z), rm_trunc_f64(v.w));
}
RM_INLINE f64x2 rm_fract_f64x2(const f64x2 v) {
    return rm_f64x2(rm_fract_f64(v.x), rm_fract_f64(v.y));
}
RM_INLINE f64x3 rm_fract_f64x3(const f64x3 v) {
    return rm_f64x3(rm_fract_f64(v.x), rm_fract_f64(v.y),
                    rm_fract_f64(v.z));
}
RM_INLINE f64x4 rm_fract_f64x4(const f64x4 v) {
    return rm_f64x4(rm_fract_f64(v.x), rm_fract_f64(v.y),
                    rm_fract_f64(v.z), rm_fract_f64(v.w));
}
